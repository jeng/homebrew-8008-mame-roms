 AS V1.42 Beta [Bld 273] - Source File monitor.asm - Page 1 - 8/16/2024 8:32:6


       1/   0 :                                     PAGE 0             ; suppress page headings in ASW listing file
       2/   0 :                                     
       3/   0 :                         ;------------------------------------------------------------------------
       4/   0 :                         ; 2400bps Serial Monitor for 8008 SBC
       5/   0 :                         ;
       6/   0 :                         ; Downloaded from https://github.com/jim11662418/8008-SBC by Jim Loos
       7/   0 :                         ; Modified by smbaker for H8-8008 project
       8/   0 :                         ; 
       9/   0 :                         ; this version assumes the following memory map:
      10/   0 :                         ; 0000H - 1FFFH:  RAM
      11/   0 :                         ; 2000H - 3FFFH:  EPROM
      12/   0 :                         ;------------------------------------------------------------------------            
      13/   0 :                         
      14/   0 :                                     include "bitfuncs.inc" 
(1)    1/   0 :                         ; Two functions for computing the hi and low byte of a word.
(1)    2/   0 :                         ; Based on bitfuncs.inc from AS assembler by Alfred Arnold, http://john.ccac.rwth-aachen.de:8000/as
(1)    3/   0 :                         
(1)    4/   0 :                         hi              function x,(x>>8)&255
(1)    5/   0 :                         lo              function x,x&255
(1)    6/   0 :                         
      15/   0 :                         
      16/   0 :                                     cpu 8008new             ; use "new" 8008 mnemonics
      17/   0 :                         
      18/   0 :                         ; front panel vars from 1FB0 to 1FEF
      19/   0 :                                     
      20/   0 :                         ; temporary storage for registers;            
      21/   0 : =1FF0H                  save_H:     equ 1FF0H
      22/   0 : =1FF1H                  save_L:     equ 1FF1H
      23/   0 : =1FF2H                  save_B:     equ 1FF2H
      24/   0 : =1FF3H                  save_C:     equ 1FF3H
      25/   0 : =1FF4H                  save_D:     equ 1FF4H
      26/   0 : =1FF5H                  save_E:     equ 1FF5H
      27/   0 : =1FF6H                  esccount    equ 1FF6H
      28/   0 : =1FFCH                  jmp_addr:   equ 1FFCH
      29/   0 :                         
      30/   0 : =1BH                    ESCAPE      equ 1BH
      31/   0 : =0DH                    RETURN      equ 0DH
      32/   0 :                         
      33/   0 : =8H                     LEDPORT     equ 08H                     ; Port where the 8 LEDs are at
      34/   0 : =0H                     DIPPORT     equ 00H
      35/   0 :                         
      36/   0 :                         ; when the reset pushbutton is pressed, the flip-flop is set which generates an interrupt
      37/   0 :                         ; and clears the address latches thus, the first instruction is thus always fetched from 
      38/   0 :                         ; address 0. the instruction at address 0 must be a single byte transfer instruction in 
      39/   0 :                         ; order to set the program counter. i.e., it must be one of the RST opcodes.
      40/2000 :                                     org 2000H                   ; start of EPROM
      41/2000 : 0D                                  rst 1
      42/2001 :                         
      43/2008 :                                     org 2008H                   ; rst 1 jumps here
      44/2008 : 44 40 20                            jmp go_rom0
      45/200B :                         
      46/200B :                                     include "go-rom.inc"
(1)    1/200B :                         ;-----------------------------------------------------------------------
(1)    2/200B :                         ; go-rom.inc - functions to perform bank switch and jump to start of ROM
(1)    3/200B :                         ;-----------------------------------------------------------------------
(1)    4/200B :                         
(1)    5/200B : =0CH                    MMAP0       equ 0CH
(1)    6/200B : =0DH                    MMAP1       equ 0DH
(1)    7/200B : =0EH                    MMAP2       equ 0EH
(1)    8/200B : =0FH                    MMAP3       equ 0FH
(1)    9/200B :                         
(1)   10/200B : =0H                     PAGE0       equ 000H
(1)   11/200B : =10H                    PAGE1       equ 010H
(1)   12/200B : =20H                    PAGE2       equ 020H
(1)   13/200B : =30H                    PAGE3       equ 030H
(1)   14/200B :                         
(1)   15/200B : =>DEFINED                           ifdef master
(1)   16/200B :                         
(1)   17/200B : =0CH                    RAM0        equ 0CH             ; 0x08 enables RAM, 0x04 disables EXT
(1)   18/200B : =0DH                    RAM1        equ 0DH
(1)   19/200B : =0EH                    RAM2        equ 0EH
(1)   20/200B : =0FH                    RAM3        equ 0FH
(1)   21/200B : =4H                     ROMOR       equ 04H             ; bit 04H, if low will access ext RAM
(1)   22/200B :                         
(1)   23/200B : =8H                     EXTRAM0     equ 08H
(1)   24/200B : =9H                     EXTRAM1     equ 09H
(1)   25/200B : =0AH                    EXTRAM2     equ 0AH
(1)   26/200B : =0BH                    EXTRAM3     equ 0BH
(1)   27/200B :                         
(1)   28/200B : =4H                     ROM0        equ ROMOR | 00H
(1)   29/200B : =5H                     ROM1        equ ROMOR | 01H
(1)   30/200B :                         
(1)   31/200B : =>FALSE                             else
(1)   32/200B :                         
(1)   33/200B :                         RAM0        equ 80H             ; 0x80 enables RAM
(1)   34/200B :                         RAM1        equ 81H
(1)   35/200B :                         RAM2        equ 82H
(1)   36/200B :                         RAM3        equ 83H
(1)   37/200B :                         ROMOR       equ 00H
(1)   38/200B :                         
(1)   39/200B : [15]                                endif
(1)   40/200B :                         
(1)   41/2040 :                                     org 2040H
(1)   42/2040 : 06 00                   go_rom0:    mvi a,00H
(1)   43/2042 : 44 54 20                            jmp go_rom
(1)   44/2045 : 06 01                   go_rom1:    mvi a,01H
(1)   45/2047 : 44 54 20                            jmp go_rom
(1)   46/204A : 06 02                   go_rom2:    mvi a,02H
(1)   47/204C : 44 54 20                            jmp go_rom
(1)   48/204F : 06 03                   go_rom3:    mvi a,03H
(1)   49/2051 : 44 54 20                            jmp go_rom
(1)   50/2054 :                         
(1)   51/2054 :                                     ;; go_rom
(1)   52/2054 :                                     ;; input
(1)   53/2054 :                                     ;;    A = rom number. Assumes each ROM consumes 2 pages (8KB total)
(1)   54/2054 :                                     ;; destroys
(1)   55/2054 :                                     ;;    B
(1)   56/2054 : C8                      go_rom:     mov b,a
(1)   57/2055 : 12                                  ral                 ; A = A * 2
(1)   58/2056 : 24 FE                               ani 0FEH
(1)   59/2058 : 34 04                               ori ROMOR
(1)   60/205A : 5D                                  out MMAP2           ; page2 = (rom*2)
(1)   61/205B : 04 01                               adi 1H              
(1)   62/205D : 5F                                  out MMAP3           ; page3 = (rom*2)+1
(1)   63/205E : 06 0C                               mvi a, RAM0
(1)   64/2060 : 59                                  out MMAP0
(1)   65/2061 : 06 0D                               mvi a, RAM1
(1)   66/2063 : 5B                                  out MMAP1
(1)   67/2064 : C1                                  mov a,b
(1)   68/2065 : 43                                  in 1                ; enable mapper
(1)   69/2066 : 44 6C 20                            jmp rom_start
(1)   70/2069 :                         
(1)   71/2069 :                         
      47/2069 :                         
      48/2069 :                         ; some variables for MasterBlaster so we put them at a consistent place
      49/2069 :                         ; see master.inc
      50/2069 :                         
      51/2069 : FF                      mas_board:  db 0FFH
      52/206A : 00                      mas_cmd:    db 00H
      53/206B : 00                      mas_arg:    db 00H
      54/206C :                         
      55/206C :                         ; The entrypoint for the monitor. go-rom jumps here after setting the
      56/206C :                         ; bank.
      57/206C :                                     
      58/206C :                         rom_start:  
      59/206C : =>DEFINED                           ifdef debugled
      60/206C : 06 01                               mvi  a,1H
      61/206E : 51                                  out  LEDPORT
      62/206F : =>FALSE                             else
      63/206F :                                     xra  a
      64/206F :                                     out  LEDPORT                ; turn off LEDs
      65/206F : [59]                                endif
      66/206F :                         
      67/206F : =>UNDEFINED                         ifdef SOUND
      68/206F :                                     call SNDINIT
      69/206F : [67]                                endif
      70/206F :                         
      71/206F : 46 E5 26                            call SINIT
      72/2072 : 46 E4 26                            call FPANINIT
      73/2075 : 46 43 27                            call STACKINIT
      74/2078 :                         
      75/2078 : =>DEFINED                           ifdef debugled
      76/2078 : 06 03                               mvi  a,3H
      77/207A : 51                                  out  08H
      78/207B : [75]                                endif
      79/207B :                                     
      80/207B :                         ;;            xra a                       ; XXX smbaker - last tested H8-8008 had this code
      81/207B :                         ;;            out 09H                     ; turn off orange LEDs
      82/207B :                                     
      83/207B : 2E 1F                               mvi h,hi(esccount)          ; clear the escape key counter
      84/207D : 36 F6                               mvi l,lo(esccount) 
      85/207F : 3E 00                               mvi m,0
      86/2081 :                                     
      87/2081 : 2E 2F                               mvi h,hi(titletxt)          ; display the title
      88/2083 : 36 FB                               mvi l,lo(titletxt) 
      89/2085 : 46 D6 26                            call puts
      90/2088 :                         
      91/2088 : =>DEFINED                           ifdef debugled
      92/2088 : 06 07                               mvi  a,7H
      93/208A : 51                                  out  LEDPORT
      94/208B : [91]                                endif
      95/208B :                         
      96/208B : =>DEFINED                           ifdef master
      97/208B : 44 44 27                            jmp mas_init
      98/208E :                         mas_init_return:
      99/208E : [96]                                endif
     100/208E :                                     
     101/208E : 2E 30                   menu:       mvi h,hi(menutxt)           ; display the menu
     102/2090 : 36 AB                               mvi l,lo(menutxt) 
     103/2092 : 46 D6 26                            call puts
     104/2095 :                                     
     105/2095 : 2E 31                   prompt:     mvi h,hi(prompttxt)         ; prompt for input
     106/2097 : 36 A7                               mvi l,lo(prompttxt) 
     107/2099 : 46 D6 26                            call puts
     108/209C : 46 ED 2F                prompt0:    call getch                  ; get input command from user
     109/209F :                         
     110/209F : =>DEFINED                           ifdef debugled
     111/209F : F0                                  mov  l,a
     112/20A0 : 06 0F                               mvi  a,0FH
     113/20A2 : 51                                  out  LEDPORT
     114/20A3 : C6                                  mov  a,l
     115/20A4 : [110]                               endif
     116/20A4 :                         
     117/20A4 : 3C 3A                               cpi ':'
     118/20A6 : 68 E1 22                            jz hexdl1a                  ; hex file download started
     119/20A9 : 3C 1B                               cpi ESCAPE                  ; is the input the escape key?
     120/20AB : 48 B8 20                            jnz prompt1                 ; nope
     121/20AE : 2E 1F                               mvi h,hi(esccount)  
     122/20B0 : 36 F6                               mvi l,lo(esccount) 
     123/20B2 : CF                                  mov b,m
     124/20B3 : 08                                  inr b                       ; yes, increment the escape key count
     125/20B4 : F9                                  mov m,b
     126/20B5 : 44 9C 20                            jmp prompt0                 ; go back for more imput     
     127/20B8 : 3C 3F                   prompt1:    cpi '?'                     ; is the input '?'
     128/20BA : 48 D3 20                            jnz prompt2                 ; nope 
     129/20BD : 2E 1F                               mvi h,hi(esccount)  
     130/20BF : 36 F6                               mvi l,lo(esccount) 
     131/20C1 : C7                                  mov a,m
     132/20C2 : 3E 00                               mvi m,0            
     133/20C4 : 3C 02                               cpi 2                       ; was the escape key pressed twice in succession?
     134/20C6 : 48 8E 20                            jnz menu                    ; nope, display the menu
     135/20C9 : 2E 33                               mvi h,hi(copytxt)           ; escape, escape followed by '?' displays the copyright notice
     136/20CB : 36 A8                               mvi l,lo(copytxt) 
     137/20CD : 46 D6 26                            call puts
     138/20D0 : 44 95 20                            jmp prompt
     139/20D3 :                         
     140/20D3 : 2E 1F                   prompt2:    mvi h,hi(esccount)  
     141/20D5 : 36 F6                               mvi l,lo(esccount) 
     142/20D7 : 3E 00                               mvi m,0
     143/20D9 : 3C 61                               cpi 'a'                     ; is the input character below 'a'?
     144/20DB : 60 E0 20                            jc $+5                      ; skip the next instruction if the character is already upper case
     145/20DE : 14 20                               sui 20H                     ; else, convert to the character to upper case
     146/20E0 : 46 DC 2F                            call putch                  ; echo the character
     147/20E3 : 3C 42                               cpi 'B'
     148/20E5 : 68 64 23                            jz rombasic                 ; call subroutine
     149/20E8 : 3C 43                               cpi 'C'
     150/20EA : 68 B4 23                            jz callsub                  ; call subroutine
     151/20ED : 3C 44                               cpi 'D'
     152/20EF : 68 52 21                            jz dump                     ; dump memory
     153/20F2 : 3C 45                               cpi 'E'
     154/20F4 : 68 03 22                            jz examine                  ; examine/modify memory
     155/20F7 : 3C 46                               cpi 'F'
     156/20F9 : 68 C3 21                            jz fill                     ; fill memory
     157/20FC : 3C 47                               cpi 'G'
     158/20FE : 68 92 23                            jz goto                     ; goto address
     159/2101 : 3C 48                               cpi 'H'
     160/2103 : 68 C8 22                            jz hexdl                    ; Intel hex file download
     161/2106 : 3C 49                               cpi 'I'
     162/2108 : 68 D9 23                            jz input                    ; input from port
     163/210B : 3C 4F                               cpi 'O'
     164/210D : 68 0F 24                            jz output                   ; output to port
     165/2110 : 3C 50                               cpi 'P'
     166/2112 : 68 36 21                            jz pop                      ; output to port
     167/2115 : 3C 52                               cpi 'R'
     168/2117 : 68 6E 22                            jz bindl                    ; binary file download
     169/211A : 3C 53                               cpi 'S'
     170/211C : 68 73 23                            jz switch                   ; switch to rom bank and jump
     171/211F : 3C 55                               cpi 'U'
     172/2121 : 68 44 21                            jz push                     ; push to stack
     173/2124 :                         
     174/2124 : =>DEFINED                           ifdef master
     175/2124 : 3C 4D                               cpi 'M'
     176/2126 : 68 A4 27                            jz mas_menu
     177/2129 : [174]                               endif
     178/2129 :                         
     179/2129 : =>UNDEFINED                         ifdef frontpanel_isr
     180/2129 :                                     cpi 'Y'
     181/2129 :                                     jz enableint               ; disable interrupts
     182/2129 :                                     cpi 'Z'
     183/2129 :                                     jz disableint               ; disable interrupts
     184/2129 : [179]                               endif ; frontpanel_isr
     185/2129 :                         
     186/2129 : 3C 0D                               cpi 0DH
     187/212B : 68 8E 20                            jz menu                     ; display the menu
     188/212E : 06 3F                               mvi a,'?'
     189/2130 : 46 DC 2F                            call putch                  ; whaaat??
     190/2133 : 44 95 20                            jmp prompt
     191/2136 :                         
     192/2136 : 2E 34                   pop:       mvi h,hi(poptxt)
     193/2138 : 36 6A                              mvi l,lo(poptxt)
     194/213A : 46 D6 26                           call puts                   ; prompt for the value
     195/213D : 4F                                 in stack_pop
     196/213E : 46 91 26                           call write_hex
     197/2141 : 44 95 20                           jmp prompt
     198/2144 :                         
     199/2144 : 2E 34                   push:      mvi h,hi(pushtxt)
     200/2146 : 36 75                              mvi l,lo(pushtxt)
     201/2148 : 46 D6 26                           call puts                   ; prompt for the value
     202/214B : 46 0C 26                           call get_two                ; get the value used to fill in A
     203/214E : 6F                                 out stack_push
     204/214F : 44 95 20                           jmp prompt
     205/2152 :                         
     206/2152 : =>UNDEFINED                        ifdef frontpanel_isr
     207/2152 :                         
     208/2152 :                         disableint: mvi h,hi(disabletxt)
     209/2152 :                                    mvi l,lo(disabletxt)
     210/2152 :                                    call puts                   ; prompt for the value
     211/2152 :                                    out int_di
     212/2152 :                                    jmp prompt
     213/2152 :                         
     214/2152 :                         enableint: mvi h,hi(enabletxt)
     215/2152 :                                    mvi l,lo(enabletxt)
     216/2152 :                                    call puts                   ; prompt for the value
     217/2152 :                                    call STARTINT
     218/2152 :                                    jmp prompt
     219/2152 :                         
     220/2152 : [206]                              endif ; frontpanel_isr
     221/2152 :                                     
     222/2152 :                         ;------------------------------------------------------------------------
     223/2152 :                         ; dump a page of memory in hex and ascii
     224/2152 :                         ; space key aborts display.
     225/2152 :                         ;------------------------------------------------------------------------
     226/2152 : 2E 31                   dump:       mvi h,hi(dumptxt)
     227/2154 : 36 AC                               mvi l,lo(dumptxt)
     228/2156 : 46 D6 26                            call puts     
     229/2159 : 46 52 24                            call get_addr               ; get the four digit address
     230/215C : 60 95 20                            jc prompt                   ; exit prematurely if space, enter or escape
     231/215F : 2E 32                               mvi h,hi(columntxt)
     232/2161 : 36 B3                               mvi l,lo(columntxt)
     233/2163 : 46 D6 26                            call puts     
     234/2166 : 2E 1F                               mvi h,hi(save_H)
     235/2168 : 36 F0                               mvi l,lo(save_H)            
     236/216A : CF                                  mov b,m                     ; move the high byte of the address into B
     237/216B : 30                                  inr l
     238/216C : C7                                  mov a,m                     ; move the high byte of the address into A
     239/216D : 24 F0                               ani 0F0H                    ; start on a 16 byte boundry            
     240/216F : F0                                  mov l,a                     ; move it to L
     241/2170 : E9                                  mov h,b
     242/2171 : 46 C7 26                dump2:      call crlf                   ; start on a new line
     243/2174 : C5                                  mov a,h
     244/2175 : 46 91 26                            call write_hex              ; write the high byte of the address
     245/2178 : C6                                  mov a,l
     246/2179 : 46 91 26                            call write_hex              ; write the low byte of the address
     247/217C : 46 D1 26                            call space
     248/217F :                                     
     249/217F :                                     ; write one line of 16 bytes in hex and then in ascii
     250/217F : 41                      dump3:      in 0
     251/2180 : 1A                                  rar
     252/2181 : 40 95 20                            jnc prompt                  ; abort if start bit detected
     253/2184 : C7                                  mov a,m                     ; retrieve the byte from memory
     254/2185 : 46 91 26                            call write_hex              ; write it as two hex digits
     255/2188 : 46 D1 26                            call space
     256/218B : 30                                  inr l
     257/218C : C6                                  mov a,l
     258/218D : 24 0F                               ani 0FH                     ; 16 bytes?
     259/218F : 68 95 21                            jz dump4                    ; move on to print ascii characters
     260/2192 : 44 7F 21                            jmp dump3                   ; otherwise, next address
     261/2195 :                                     
     262/2195 :                                     ; ascii characters
     263/2195 : 46 D1 26                dump4:      call space
     264/2198 : 41                                  in 0
     265/2199 : 1A                                  rar
     266/219A : 40 95 20                            jnc prompt                  ; abort if start bit detected
     267/219D : C6                                  mov a,l                     
     268/219E : 14 10                               sui 16
     269/21A0 : F0                                  mov l,a                     ; back to the starting address for this line
     270/21A1 : C7                      dump5:      mov a,m                     ; retrieve the byte from memory
     271/21A2 : 3C 20                               cpi 32                      ; control character?
     272/21A4 : 60 AC 21                            jc dump6                    ; jump if the byte from memory is < 32
     273/21A7 : 3C 80                               cpi 128                     ; extended ascii?
     274/21A9 : 60 AE 21                            jc dump7                    ; jump if the byte from memory is < 128
     275/21AC : 06 2E                   dump6:      mvi a,'.'                   ; print '.' for non-printable sacii
     276/21AE : 46 DC 2F                dump7:      call putch
     277/21B1 : 41                                  in 0
     278/21B2 : 1A                                  rar
     279/21B3 : 40 95 20                            jnc prompt
     280/21B6 : 30                                  inr l                       ; next address
     281/21B7 : 68 95 20                            jz prompt                   ; exit if finished with this page
     282/21BA : C6                                  mov a,l                     ; next address
     283/21BB : 24 0F                               ani 0FH                     ; 16 bytes?
     284/21BD : 68 71 21                            jz dump2                    ; jump if end of line
     285/21C0 : 44 A1 21                            jmp dump5                   ; otherwise, next memory address
     286/21C3 :                                     
     287/21C3 :                         ;------------------------------------------------------------------------
     288/21C3 :                         ; fill a block of memory with a value
     289/21C3 :                         ;------------------------------------------------------------------------
     290/21C3 : 2E 31                   fill:       mvi h,hi(filltxt)
     291/21C5 : 36 C9                               mvi l,lo(filltxt)
     292/21C7 : 46 D6 26                            call puts
     293/21CA : 46 52 24                            call get_addr               ; get the four digit address
     294/21CD : 60 95 20                            jc prompt                   ; exit prematurely if space, enter or escape            
     295/21D0 : 46 68 24                            call get_count              ; get the four digit count
     296/21D3 : 60 95 20                            jc prompt                   ; exit prematurely if space, enter or escape            
     297/21D6 : 2E 32                               mvi h,hi(valuetxt)
     298/21D8 : 36 A0                               mvi l,lo(valuetxt)
     299/21DA : 46 D6 26                            call puts                   ; prompt for the value
     300/21DD : 46 0C 26                            call get_two                ; get the value used to fill in A
     301/21E0 : 2E 1F                               mvi h,hi(save_B)
     302/21E2 : 36 F2                               mvi l,lo(save_B)
     303/21E4 : CF                                  mov b,m                     ; retrieve the count high byte from memory
     304/21E5 : 30                                  inr l
     305/21E6 : D7                                  mov c,m                     ; retrieve the count low byte from memory
     306/21E7 : 2E 1F                               mvi h,hi(save_H)
     307/21E9 : 36 F0                               mvi l,lo(save_H)
     308/21EB : DF                                  mov d,m                     ; retrieve the address high byte from memory
     309/21EC : 30                                  inr l
     310/21ED : E7                                  mov e,m                     ; retrieve the address low byte from memory
     311/21EE : EB                                  mov h,d                     ; get the address high byte from D
     312/21EF : F4                                  mov l,e                     ; get the address low byte from E
     313/21F0 : F8                      fillloop:   mov m,a                     ; save the value in memory
     314/21F1 : 30                                  inr l                       ; increment L
     315/21F2 : 48 F6 21                            jnz fillloop1
     316/21F5 : 28                                  inr h                       ; increment H
     317/21F6 : 46 4A 24                fillloop1:  call decBC
     318/21F9 : D8                                  mov d,a                     ; save the fill byte in D
     319/21FA : C2                                  mov a,c                     ; get the count low byte 
     320/21FB : B1                                  ora b                       ; OR with the count high byte
     321/21FC : C3                                  mov a,d                     ; restore the fill byte from D
     322/21FD : 48 F0 21                            jnz fillloop
     323/2200 : 44 95 20                            jmp prompt
     324/2203 :                         
     325/2203 :                         ;------------------------------------------------------------------------
     326/2203 :                         ; examine/modify memory.
     327/2203 :                         ; space increments memory pointer without affecting value.
     328/2203 :                         ; enter or escape exits.
     329/2203 :                         ;------------------------------------------------------------------------        
     330/2203 : 2E 31                   examine:    mvi h,hi(examinetxt)  
     331/2205 : 36 B9                               mvi l,lo(examinetxt) 
     332/2207 : 46 D6 26                            call puts 
     333/220A : 46 52 24                            call get_addr               ; get the four digit address
     334/220D : 60 95 20                            jc prompt                   ; exit prematurely if space, enter or escape            
     335/2210 : 46 C7 26                            call crlf
     336/2213 : 2E 1F                               mvi h,hi(save_H)
     337/2215 : 36 F0                               mvi l,lo(save_H)
     338/2217 : DF                                  mov d,m                     ; retrieve the address high byte from memory
     339/2218 : 30                                  inr l
     340/2219 : E7                                  mov e,m                     ; retrieve the address low byte from memory
     341/221A : EB                                  mov h,d                     ; get the address high byte from D
     342/221B : F4                                  mov l,e                     ; get the address low byte from E
     343/221C : 46 C7 26                examine1:   call crlf
     344/221F : C5                                  mov a,h
     345/2220 : 46 91 26                            call write_hex              ; high byte of the address
     346/2223 : C6                                  mov a,l
     347/2224 : 46 91 26                            call write_hex              ; low byte of the address
     348/2227 : 46 7E 24                            call save_HL
     349/222A : 2E 33                               mvi h,hi(arrowtxt)
     350/222C : 36 66                               mvi l,lo(arrowtxt)
     351/222E : 46 D6 26                            call puts    
     352/2231 : 46 88 24                            call restore_HL
     353/2234 : C7                                  mov a,m
     354/2235 : 46 91 26                            call write_hex              ; value stored at memory
     355/2238 : 46 7E 24                            call save_HL
     356/223B : 2E 33                               mvi h,hi(newvaluetxt)
     357/223D : 36 6C                               mvi l,lo(newvaluetxt)
     358/223F : 46 D6 26                            call puts    
     359/2242 : 46 88 24                            call restore_HL
     360/2245 : 46 0C 26                examine3:   call get_two                ; two hex digits
     361/2248 : 60 54 22                            jc examine4                 ; jump if space, enter or escape
     362/224B : F8                                  mov m,a                     ; else save the new value in memory at this address
     363/224C : 30                                  inr l                       ; next address
     364/224D : 48 1C 22                            jnz examine1
     365/2250 : 28                                  inr h
     366/2251 : 44 1C 22                            jmp examine1
     367/2254 : 3C 20                   examine4:   cpi ' '                     ; space?
     368/2256 : 48 61 22                            jnz examine5
     369/2259 : 30                                  inr l                       ; next address
     370/225A : 48 1C 22                            jnz examine1
     371/225D : 28                                  inr h
     372/225E : 44 1C 22                            jmp examine1
     373/2261 : 3C 0D                   examine5:   cpi 0DH                     ; enter?
     374/2263 : 68 95 20                            jz  prompt
     375/2266 : 3C 1B                               cpi 1BH                     ; escape?
     376/2268 : 68 95 20                            jz  prompt
     377/226B : 44 45 22                            jmp examine3
     378/226E :                                     
     379/226E :                         ;------------------------------------------------------------------------
     380/226E :                         ; load a binary file into memory using the Tera Term "Send file" function.
     381/226E :                         ; when using the Tera Term "Send file" function, make sure that:
     382/226E :                         ;   1. the serial port transmit delay is set to at least 2 msec/char
     383/226E :                         ;   2. the "Binary" option check box on the Send File dialog box is checked.
     384/226E :                         ; the download is assumed to be finished when no characters have been received
     385/226E :                         ; from Teraterm for 3 seconds.
     386/226E :                         ; uses BC as the "idle" counter.
     387/226E :                         ;------------------------------------------------------------------------            
     388/226E : 2E 32                   bindl:      mvi h,hi(binloadtxt)  
     389/2270 : 36 4B                               mvi l,lo(binloadtxt) 
     390/2272 : 46 D6 26                            call puts 
     391/2275 :                                     
     392/2275 : 46 52 24                            call get_addr               ; get the four digit hex load address
     393/2278 : 60 95 20                            jc prompt                   ; exit prematurely if space, enter or escape            
     394/227B :                         
     395/227B : 2E 32                               mvi h,hi(dnldtxt)
     396/227D : 36 EA                               mvi l,lo(dnldtxt)
     397/227F : 46 D6 26                            call puts                   ; prompt for download
     398/2282 :                         
     399/2282 : 46 E4 26                            call FPDISABLE
     400/2285 :                                    
     401/2285 : 2E 1F                               mvi h,hi(save_H)
     402/2287 : 36 F0                               mvi l,lo(save_H)
     403/2289 : DF                                  mov d,m                     ; retrieve the start address high byte from memory into D
     404/228A : 30                                  inr l
     405/228B : E7                                  mov e,m                     ; retrieve the start address low byte from memory into E
     406/228C : EB                                  mov h,d                     ; get the start address high byte into H
     407/228D : F4                                  mov l,e                     ; get the start address low byte into L
     408/228E :                         
     409/228E : 46 F5 2F                            call getch_bin              ; get the first byte of the file from the serial port
     410/2291 : F8                                  mov m,a                     ; write the first byte to memory
     411/2292 : 30                                  inr l                       ; increment the low byte of the address pointer
     412/2293 : 48 97 22                            jnz bindl0                  ; go get next byte
     413/2296 : 28                                  inr h                       ; increment the high byte of the address pointer
     414/2297 :                         
     415/2297 : 0E 40                   bindl0:     mvi b,40H                   ; initialize "idle" counter (BC) to 16284
     416/2299 : 16 00                               mvi c,0
     417/229B : 46 3F 27                bindl1:     call CRDY                   ; wait for character
     418/229E : 48 AC 22                            jnz bindl2                  ; jump if start bit has been detected
     419/22A1 : 11                                  dcr c                       ; else decrement the low byte of the "idle" counter
     420/22A2 : 48 9B 22                            jnz bindl1
     421/22A5 : 09                                  dcr b                       ; secrement the high byte of the "idle" counter
     422/22A6 : 48 9B 22                            jnz bindl1
     423/22A9 : 44 B8 22                            jmp bfinished               ; the "idle" counter has reached zero (no characters for 3 seconds)
     424/22AC :                         
     425/22AC : 46 F5 2F                bindl2:     call getch_bin              ; start bit has been detected, get the byte from the serial port
     426/22AF : F8                                  mov m,a                     ; write the byte to memory
     427/22B0 : 30                                  inr l                       ; increment the low byte of the address pointer
     428/22B1 : 48 97 22                            jnz bindl0                  ; go back for the next byte
     429/22B4 : 28                                  inr h                       ; increment the high byte of the address pointer 
     430/22B5 : 44 97 22                            jmp bindl0                  ; go back for the next byte
     431/22B8 :                         
     432/22B8 : 46 E4 26                bfinished:  call FPENABLE
     433/22BB : 2E 33                               mvi h,hi(loadedtxt)
     434/22BD : 36 41                               mvi l,lo(loadedtxt)
     435/22BF : 46 D6 26                            call puts                   ; print "File loaded."
     436/22C2 : 46 88 24                            call restore_HL
     437/22C5 : 44 95 20                            jmp prompt
     438/22C8 :                                     
     439/22C8 :                         ;------------------------------------------------------------------------
     440/22C8 :                         ; load an Intel HEX file into memory using the Tera Term "Send file" function.
     441/22C8 :                         ; uses D for the record's byte count. uses B to hold the record's checksum.
     442/22C8 :                         ; when the download is finished, jump to the address contained in the last record.
     443/22C8 :                         ; when using the Tera Term "Send file" function, make sure that:
     444/22C8 :                         ;   1. the serial port transmit delay is set to at least 1 mSec/char
     445/22C8 :                         ;   2. the "Binary" option check box on the Send File dialog box is NOT checked.
     446/22C8 :                         ;------------------------------------------------------------------------            
     447/22C8 : 2E 32                   hexdl:      mvi h,hi(hexloadtxt)  
     448/22CA : 36 65                               mvi l,lo(hexloadtxt) 
     449/22CC : 46 D6 26                            call puts 
     450/22CF :                         
     451/22CF : 2E 33                               mvi h,hi(waittxt)
     452/22D1 : 36 14                               mvi l,lo(waittxt)
     453/22D3 : 46 D6 26                            call puts                   ; prompt for download
     454/22D6 :                         
     455/22D6 : 46 E4 26                            call FPDISABLE
     456/22D9 :                                     
     457/22D9 : 46 E2 2F                hexdl1:     call getche                 ; get the first character of the record and echo it
     458/22DC : 3C 3A                               cpi ':'                     ; start of record character?
     459/22DE : 48 D9 22                            jnz hexdl1                  ; loop until start of record found
     460/22E1 :                                     
     461/22E1 : 46 4D 23                hexdl1a:    call hexbyte                ; get byte count
     462/22E4 : 3C 00                               cpi 0                       ; zero byte count?
     463/22E6 : 68 1F 23                            jz waitend                  ; zero means last record             
     464/22E9 : D8                                  mov d,a                     ; save the byte count in D
     465/22EA : C8                                  mov b,a                     ; save as the checksum in B
     466/22EB :                                     
     467/22EB : 46 4D 23                            call hexbyte                ; get address hi byte
     468/22EE : E8                                  mov h,a                     ; save hi byte in H
     469/22EF : 81                                  add b                       ; add to the checksum
     470/22F0 : C8                                  mov b,a                     ; save the checksum in B
     471/22F1 : 46 4D 23                            call hexbyte                ; get address lo byte
     472/22F4 : F0                                  mov l,a                     ; save lo byte in L
     473/22F5 : 81                                  add b                       ; add to the checksum
     474/22F6 : C8                                  mov b,a                     ; save the checksum in B
     475/22F7 :                                     
     476/22F7 : 46 4D 23                            call hexbyte                ; get record type
     477/22FA : 3C 01                               cpi 1                       ; end of file?
     478/22FC : 68 1F 23                            jz waitend                  ; record type 1 means end of file
     479/22FF : D0                                  mov c,a                     ; save record type in C
     480/2300 : 81                                  add b                       ; add record type to checksum
     481/2301 : C8                                  mov b,a                     ; save the checksum
     482/2302 : C2                                  mov a,c                     ; restore the record type from C
     483/2303 :                                     
     484/2303 : 46 4D 23                hexdl2:     call hexbyte                ; get the next data byte
     485/2306 : F8                                  mov m,a                     ; store it in memory
     486/2307 : 81                                  add b                       ; add to the checksum
     487/2308 : C8                                  mov b,a                     ; save the checksum
     488/2309 : 30                                  inr l                       ; increment lo byte of address pointer
     489/230A : 48 0E 23                            jnz hexdl3
     490/230D : 28                                  inr h                       ; increment hi byte of address pointer
     491/230E : 19                      hexdl3:     dcr d
     492/230F : 68 15 23                            jz hexdl4                   ; all bytes in this record downloaded
     493/2312 : 44 03 23                            jmp hexdl2                  ; go back for next data byte
     494/2315 :                                     
     495/2315 : 46 4D 23                hexdl4:     call hexbyte                ; get the checksum byte
     496/2318 : 81                                  add b                       ; add to the checksum
     497/2319 :                         ; Since the record's checksum byte is the two's complement and therefore the additive inverse
     498/2319 :                         ; of the data checksum, the verification process can be reduced to summing all decoded byte 
     499/2319 :                         ; values, including the record's checksum, and verifying that the LSB of the sum is zero.             
     500/2319 : 48 40 23                            jnz cksumerr                ; non zero means checksum error
     501/231C : 44 D9 22                            jmp hexdl1                  ; else, go back for the next record
     502/231F :                                     
     503/231F :                         ; get the last record
     504/231F : 46 4D 23                waitend:    call hexbyte                ; get the last address hi byte
     505/2322 : E8                                  mov h,a                     ; save hi byte in H
     506/2323 : 46 4D 23                            call hexbyte                ; get the last address lo byte
     507/2326 : F0                                  mov l,a                     ; save lo byte in L
     508/2327 : 46 7E 24                            call save_HL                ; save HL for later
     509/232A :                                     
     510/232A : 46 4D 23                            call hexbyte                ; get the last record type
     511/232D : 46 4D 23                            call hexbyte                ; get the last checksum
     512/2330 :                         
     513/2330 : 46 E4 26                finished:   call FPENABLE
     514/2333 : 2E 33                               mvi h,hi(loadedtxt)
     515/2335 : 36 41                               mvi l,lo(loadedtxt)
     516/2337 : 46 D6 26                            call puts                   ; print "File loaded."
     517/233A : 46 88 24                            call restore_HL
     518/233D : 44 A2 23                            jmp jump1                   ; jump to the address in the last record
     519/2340 :                         
     520/2340 : 46 E4 26                cksumerr:   call FPENABLE
     521/2343 : 2E 33                               mvi h,hi(errortxt)
     522/2345 : 36 52                               mvi l,lo(errortxt)
     523/2347 : 46 D6 26                            call puts                   ; print "Checksum error."
     524/234A : 44 95 20                            jmp prompt
     525/234D :                         
     526/234D :                         ;------------------------------------------------------------------------
     527/234D :                         ; get two hex digits from the serial port during the hex download and 
     528/234D :                         ; convert them into a byte returned in A. 
     529/234D :                         ; uses A, C and E
     530/234D :                         ;------------------------------------------------------------------------
     531/234D : 46 E2 2F                hexbyte:    call getche             ; get the first character and echo it
     532/2350 : 46 B2 26                            call ascii2hex          ; convert to hex nibble
     533/2353 : 02                                  rlc                     ; rotate into the most significant nibble
     534/2354 : 02                                  rlc
     535/2355 : 02                                  rlc
     536/2356 : 02                                  rlc
     537/2357 : 24 F0                               ani 0F0H                ; mast out least signifficant nibble
     538/2359 : D0                                  mov c,a                 ; save the first digit in C as the most significant nibble
     539/235A :                                     
     540/235A : 46 E2 2F                            call getche             ; get the second character and echo it
     541/235D : 46 B2 26                            call ascii2hex          ; convert to hex nibble
     542/2360 : 24 0F                               ani 0FH                 ; mask out the most significant bits
     543/2362 : B2                                  ora c                   ; combine the two nibbles
     544/2363 : 07                                  ret
     545/2364 :                         
     546/2364 :                         ;------------------------------------------------------------------------
     547/2364 :                         ; switch banks and load rom basic
     548/2364 :                         ;------------------------------------------------------------------------      
     549/2364 :                         
     550/2364 : 2E 33                   rombasic:   mvi h,hi(rombastxt)
     551/2366 : 36 E2                               mvi l,lo(rombastxt)
     552/2368 : 46 D6 26                            call puts
     553/236B : 46 E4 26                            call FPDISABLE
     554/236E : 06 01                               mvi a, 1H
     555/2370 : 44 54 20                            jmp go_rom
     556/2373 :                         
     557/2373 :                         ;------------------------------------------------------------------------
     558/2373 :                         ; switch banks to arbitrary bank number and jump to rom
     559/2373 :                         ;------------------------------------------------------------------------      
     560/2373 :                         
     561/2373 : 2E 33                   switch:     mvi h,hi(switchtxt)
     562/2375 : 36 E9                               mvi l,lo(switchtxt)
     563/2377 : 46 D6 26                            call puts
     564/237A : 46 42 26                            call get_one
     565/237D : 60 95 20                            jc prompt                   ; exit if escape  
     566/2380 : C8                                  mov b,a                     ; save character in B
     567/2381 : 2E 34                               mvi h,hi(loadingtxt)
     568/2383 : 36 47                               mvi l,lo(loadingtxt)
     569/2385 : 46 D6 26                            call puts
     570/2388 : 46 E4 26                            call FPDISABLE
     571/238B : C1                                  mov a,b                     ; restore character
     572/238C : 46 B2 26                            call ascii2hex              ; convert character to number
     573/238F : 44 54 20                            jmp go_rom
     574/2392 :                                     
     575/2392 :                         ;------------------------------------------------------------------------
     576/2392 :                         ; go to a memory address
     577/2392 :                         ;------------------------------------------------------------------------           
     578/2392 : 2E 32                   goto:       mvi h,hi(gototxt)
     579/2394 : 36 0C                               mvi l,lo(gototxt)
     580/2396 : 46 D6 26                            call puts
     581/2399 : 46 75 25                            call get_four               ; get the four digit address into HL
     582/239C : 60 95 20                            jc prompt                   ; exit if escape            
     583/239F : 44 A2 23                            jmp jump1
     584/23A2 :                                     
     585/23A2 :                         ;------------------------------------------------------------------------
     586/23A2 :                         ; jump to a memory address
     587/23A2 :                         ;------------------------------------------------------------------------           
     588/23A2 :                         
     589/23A2 : DD                      jump1:      mov d,h                     ; save the high byte of the address in D
     590/23A3 : E6                                  mov e,l                     ; save the low byte of the address in E
     591/23A4 : 2E 1F                               mvi h,hi(jmp_addr)
     592/23A6 : 36 FC                               mvi l,lo(jmp_addr)
     593/23A8 : 3E 44                               mvi m,44H                   ; store the "jmp" instruction at jmp_addr
     594/23AA : 30                                  inr l                       ; next memory location
     595/23AB : FC                                  mov m,e                     ; store the low byte of jump address at jmp_addr+1
     596/23AC : 30                                  inr l                       ; next memory location
     597/23AD : FB                                  mov m,d                     ; store the high byte of jump address at jmp_addr+2
     598/23AE : 46 C7 26                            call crlf                   ; start of a new line
     599/23B1 : 44 FC 1F                            jmp jmp_addr                ; go jump!
     600/23B4 :                                   
     601/23B4 :                         ;------------------------------------------------------------------------            
     602/23B4 :                         ; call a subroutine
     603/23B4 :                         ;------------------------------------------------------------------------                   
     604/23B4 : 2E 31                   callsub:    mvi h,hi(calltxt)
     605/23B6 : 36 F0                               mvi l,lo(calltxt)
     606/23B8 : 46 D6 26                            call puts
     607/23BB : 46 75 25                            call get_four               ; get the four digit address into HL
     608/23BE : 60 95 20                            jc prompt                   ; exit if escape
     609/23C1 : DD                                  mov d,h                     ; save the high byte of the address in D
     610/23C2 : E6                                  mov e,l                     ; save the low byte of the address in E
     611/23C3 : 2E 1F                               mvi h,hi(jmp_addr)
     612/23C5 : 36 FC                               mvi l,lo(jmp_addr)
     613/23C7 : 3E 46                               mvi m,46H                   ; store "CALL" instruction at jmp+addr
     614/23C9 : 30                                  inr l
     615/23CA : FC                                  mov m,e                     ; store the low byte of the subroutine address at jmp_addr+1
     616/23CB : 30                                  inr l                       ; next memory location
     617/23CC : FB                                  mov m,d                     ; store the high byte of the subroutine address at jmp_addr+2
     618/23CD : 30                                  inr l
     619/23CE : 3E 07                               mvi m,07H                   ; store "RET" instruction at jmp_addr+3
     620/23D0 : 46 C7 26                            call crlf                   ; start of a new line
     621/23D3 : 46 FC 1F                            call jmp_addr               ; call the subroutine
     622/23D6 : 44 95 20                            jmp prompt
     623/23D9 :                                     
     624/23D9 :                         ;------------------------------------------------------------------------            
     625/23D9 :                         ; get a byte from an input port
     626/23D9 :                         ;------------------------------------------------------------------------            
     627/23D9 : 2E 32                   input:      mvi h,hi(inputtxt)
     628/23DB : 36 24                               mvi l,lo(inputtxt)
     629/23DD : 46 D6 26                            call puts
     630/23E0 : 2E 33                               mvi h,hi(porttxt)
     631/23E2 : 36 74                               mvi l,lo(porttxt)
     632/23E4 : 46 D6 26                            call puts    
     633/23E7 : 46 0C 26                            call get_two
     634/23EA : 60 95 20                            jc prompt                   ; exit if escape            
     635/23ED : 24 07                               ani 00000111B
     636/23EF : 02                                  rlc
     637/23F0 : 34 41                               ori 01000001B
     638/23F2 : 2E 1F                               mvi h,hi(jmp_addr)
     639/23F4 : 36 FC                               mvi l,lo(jmp_addr)
     640/23F6 : F8                                  mov m,a                   ; store the "IN" instruction at jmp_addr
     641/23F7 : 30                                  inr l
     642/23F8 : 3E 07                               mvi m,07H                 ; store the "RET" instruction at jmp_addr+1
     643/23FA : 46 FC 1F                            call jmp_addr             ; execute the "IN" instruction
     644/23FD : D8                                  mov d,a                   ; save the input data in E
     645/23FE : 2E 33                               mvi h,hi(arrowtxt)
     646/2400 : 36 66                               mvi l,lo(arrowtxt)
     647/2402 : 46 D6 26                            call puts
     648/2405 : C3                                  mov a,d
     649/2406 : 46 91 26                            call write_hex
     650/2409 : 46 C7 26                            call crlf
     651/240C :                                     
     652/240C : 44 95 20                            jmp prompt
     653/240F :                         
     654/240F :                         ;------------------------------------------------------------------------            
     655/240F :                         ; send a byte to an output port
     656/240F :                         ;------------------------------------------------------------------------            
     657/240F : 2E 32                   output:     mvi h,hi(outputtxt)
     658/2411 : 36 38                               mvi l,lo(outputtxt)
     659/2413 : 46 D6 26                            call puts
     660/2416 : 2E 33                               mvi h,hi(porttxt)
     661/2418 : 36 74                               mvi l,lo(porttxt)
     662/241A : 46 D6 26                            call puts    
     663/241D : 46 0C 26                            call get_two
     664/2420 : 60 95 20                            jc prompt                   ; exit if escape            
     665/2423 : D8                                  mov d,a                     ; save the port address in D
     666/2424 : 2E 33                               mvi h,hi(bytetxt)
     667/2426 : 36 8E                               mvi l,lo(bytetxt)
     668/2428 : 46 D6 26                            call puts   
     669/242B : 46 0C 26                            call get_two
     670/242E : 60 95 20                            jc prompt                   ; exit if escape            
     671/2431 : E0                                  mov e,a                     ; save the date byte in E
     672/2432 : C3                                  mov a,d                     ; recall the address from D
     673/2433 : 24 1F                               ani 00011111B               ; construct the "OUT" instruction
     674/2435 : 02                                  rlc
     675/2436 : 34 41                               ori 01000001B
     676/2438 : 2E 1F                               mvi h,hi(jmp_addr)
     677/243A : 36 FC                               mvi l,lo(jmp_addr)
     678/243C : F8                                  mov m,a                   ; store the "OUT" instruction at jmp_addr
     679/243D : 30                                  inr l
     680/243E : 3E 07                               mvi m,07H                 ; store the "RET" instruction at jmp_addr+1
     681/2440 : C4                                  mov a,e                   ; recall the data byte from E
     682/2441 : 46 FC 1F                            call jmp_addr             ; execute the "OUT" instruction
     683/2444 : 46 C7 26                            call crlf                 ; start of a new line            
     684/2447 : 44 95 20                            jmp prompt            
     685/244A :                         
     686/244A :                         ;------------------------------------------------------------------------            
     687/244A :                         ; subroutine to decrement double-byte value in BC
     688/244A :                         ;------------------------------------------------------------------------
     689/244A : 11                      decBC:     dcr c                        ; decrement contents of C
     690/244B : 10                                 inr c                        ; now increment C to set/reset flags
     691/244C : 48 50 24                           jnz decbc1                   ; if C not presently zero, skip decrementing B
     692/244F : 09                                 dcr b                        ; else decrement B
     693/2450 : 11                      decbc1:    dcr c                        ; do the actual decrement of C
     694/2451 : 07                                 ret
     695/2452 :                                    
     696/2452 :                         ;------------------------------------------------------------------------            
     697/2452 :                         ; get a four digit address (in hex) and store it the high byte at "save_H" and 
     698/2452 :                         ; the low byte at "save_L". 
     699/2452 :                         ; on return BC contains the address and HL points to "save_H".
     700/2452 :                         ; uses A, BC, DE and HL.
     701/2452 :                         ;------------------------------------------------------------------------           
     702/2452 : 2E 32                   get_addr:   mvi h,hi(addresstxt)
     703/2454 : 36 78                               mvi l,lo(addresstxt)
     704/2456 : 46 D6 26                            call puts                   ; prompt for the address
     705/2459 : 46 75 25                            call get_four               ; get the address
     706/245C : 23                                  rc                          ; return prematurely if escape key
     707/245D : CD                                  mov b,h
     708/245E : D6                                  mov c,l
     709/245F : 2E 1F                               mvi h,hi(save_H)
     710/2461 : 36 F0                               mvi l,lo(save_H)
     711/2463 : F9                                  mov m,b                     ; save the address high byte in memory
     712/2464 : 30                                  inr l                       ; next memory location
     713/2465 : FA                                  mov m,c                     ; save the address low byte in memory
     714/2466 : 31                                  dcr l
     715/2467 : 07                                  ret
     716/2468 :                                     
     717/2468 :                         ;------------------------------------------------------------------------            
     718/2468 :                         ; get a four digit count (in hex) and store it the high byte at "save_B" 
     719/2468 :                         ; and the low byte at "save_C"
     720/2468 :                         ; on return BC contains the count and HL points to "save_B".
     721/2468 :                         ; uses A, BC, DE and HL.
     722/2468 :                         ;------------------------------------------------------------------------                      
     723/2468 : 2E 32                   get_count:  mvi h,hi(hcounttxt)
     724/246A : 36 8D                               mvi l,lo(hcounttxt)
     725/246C : 46 D6 26                            call puts                   ; prompt for the count
     726/246F : 46 75 25                            call get_four               ; get the count
     727/2472 : 23                                  rc                          ; return prematurely if space, enter or escape
     728/2473 : CD                                  mov b,h
     729/2474 : D6                                  mov c,l
     730/2475 : 2E 1F                               mvi h,hi(save_B)
     731/2477 : 36 F2                               mvi l,lo(save_B)
     732/2479 : F9                                  mov m,b                     ; save the high byte of the count in memory
     733/247A : 30                                  inr l
     734/247B : FA                                  mov m,c                     ; save the low byte of the count in memory
     735/247C : 31                                  dcr l
     736/247D : 07                                  ret
     737/247E :                         
     738/247E :                         ;------------------------------------------------------------------------      
     739/247E :                         ; save the contents of H and L in a temporary storage area in memory.
     740/247E :                         ; uses H and L, D and E.
     741/247E :                         ;------------------------------------------------------------------------
     742/247E : DD                      save_HL:   mov d,h                ; transfer value in H to A
     743/247F : E6                                 mov e,l                ; and value in L to E
     744/2480 : 2E 1F                              mvi h,hi(save_H)       ; and set H to storage area page           
     745/2482 : 36 F0                              mvi l,lo(save_H)       ; now set L to temporary storage locations
     746/2484 : FB                                 mov m,d                ; save A (entry value of H) in memory
     747/2485 : 30                                 inr l                  ; advance pointer
     748/2486 : FC                                 mov m,e                ; save E (entry value of L) in memory
     749/2487 : 07                                 ret
     750/2488 :                         
     751/2488 :                         ;------------------------------------------------------------------------
     752/2488 :                         ; restore the contents H and L from temporary storage in memory.
     753/2488 :                         ; uses H and L, D and E.
     754/2488 :                         ;------------------------------------------------------------------------
     755/2488 : 2E 1F                   restore_HL:mvi h,hi(save_H)       ; and set L to storage area page
     756/248A : 36 F0                              mvi l,lo(save_H)       ; now set L to start of temporary storage locations
     757/248C : DF                                 mov d,m                ; fetch stored value for H into A
     758/248D : 30                                 inr l                  ; advance pointer
     759/248E : E7                                 mov e,m                ; fetch stored value for L into E
     760/248F : 30                                 inr l                  ; advance pointer
     761/2490 : EB                                 mov h,d                ; restore  saved value for H
     762/2491 : F4                                 mov l,e                ; restore saved value for L
     763/2492 : 07                                 ret
     764/2493 :                         
     765/2493 :                         ;------------------------------------------------------------------------      
     766/2493 :                         ; save the contents of B and C in a temporary storage area in memory.
     767/2493 :                         ; uses H and L
     768/2493 :                         ;------------------------------------------------------------------------
     769/2493 : 2E 1F                   save_BC:   mvi h,hi(save_B)       ; and set H to storage area page           
     770/2495 : 36 F2                              mvi l,lo(save_B)       ; now set L to temporary storage locations
     771/2497 : F9                                 mov m,b                ; save B in memory
     772/2498 : 30                                 inr l                  ; advance pointer
     773/2499 : FA                                 mov m,c                ; save C in memory
     774/249A : 07                                 ret
     775/249B :                         
     776/249B :                         ;------------------------------------------------------------------------
     777/249B :                         ; restore the contents B and C from temporary storage in memory.
     778/249B :                         ; uses H and L
     779/249B :                         ;------------------------------------------------------------------------
     780/249B : 2E 1F                   restore_BC:mvi h,hi(save_B)       ; and set L to storage area page
     781/249D : 36 F2                              mvi l,lo(save_B)       ; now set L to start of temporary storage locations
     782/249F : CF                                 mov b,m                ; fetch stored value for B
     783/24A0 : 30                                 inr l                  ; advance pointer
     784/24A1 : D7                                 mov c,m                ; fetch stored value for C
     785/24A2 : 30                                 inr l                  ; advance pointer
     786/24A3 : 07                                 ret
     787/24A4 :                                    
     788/24A4 :                         ;------------------------------------------------------------------------      
     789/24A4 :                         ; save the contents of D and E in a temporary storage area in memory.
     790/24A4 :                         ; uses H and L
     791/24A4 :                         ;------------------------------------------------------------------------
     792/24A4 : 2E 1F                   save_DE:   mvi h,hi(save_D)       ; and set H to storage area page           
     793/24A6 : 36 F4                              mvi l,lo(save_D)       ; now set L to temporary storage locations
     794/24A8 : FB                                 mov m,d                ; save D in memory
     795/24A9 : 30                                 inr l                  ; advance pointer
     796/24AA : FC                                 mov m,e                ; save E in memory
     797/24AB : 07                                 ret
     798/24AC :                         
     799/24AC :                         ;------------------------------------------------------------------------
     800/24AC :                         ; restore the contents D and E from temporary storage in memory.
     801/24AC :                         ; uses DE and HL
     802/24AC :                         ;------------------------------------------------------------------------
     803/24AC : 2E 1F                   restore_DE:mvi h,hi(save_D)       ; and set L to storage area page
     804/24AE : 36 F4                              mvi l,lo(save_D)       ; now set L to start of temporary storage locations
     805/24B0 : DF                                 mov d,m                ; fetch stored value for D
     806/24B1 : 30                                 inr l                  ; advance pointer
     807/24B2 : E7                                 mov e,m                ; fetch stored value for E
     808/24B3 : 30                                 inr l                  ; advance pointer
     809/24B4 : 07                                 ret
     810/24B5 :                                    
     811/24B5 :                         ;------------------------------------------------------------------------        
     812/24B5 :                         ; enter decimal digits until terminated with carriage return or escape. 
     813/24B5 :                         ; returns with carry set if escape, otherwise returns with the binary 
     814/24B5 :                         ; value in HL and carry clear.
     815/24B5 :                         ; uses A, B, DE and HL
     816/24B5 :                         ;------------------------------------------------------------------------        
     817/24B5 : 2E 00                   get_dec:    mvi h,0
     818/24B7 : 36 00                               mvi l,0
     819/24B9 : 46 ED 2F                get_dec1:   call getch      ; get input from serial
     820/24BC : 3C 0D                               cpi RETURN      ; carriage return?
     821/24BE : 48 C3 24                            jnz get_dec2
     822/24C1 : A0                                  ana a           ; clear carry
     823/24C2 : 07                                  ret
     824/24C3 :                                     
     825/24C3 : 3C 1B                   get_dec2:   cpi ESCAPE      ; escape?
     826/24C5 : 48 CC 24                            jnz get_dec3 
     827/24C8 : 06 01                               mvi a,1
     828/24CA : 0A                                  rrc             ; set carry flag
     829/24CB : 07                                  ret
     830/24CC :                                     
     831/24CC : 3C 30                   get_dec3:   cpi '0'
     832/24CE : 60 B9 24                            jc get_dec1     ; go back for another digit if the digit in A is less than 0
     833/24D1 : 3C 3A                               cpi '9'+1
     834/24D3 : 40 B9 24                            jnc get_dec1    ; go back for another digit if the digit in A is greater than 9
     835/24D6 : 46 DC 2F                            call putch      ; since it's legit, echo the digit
     836/24D9 : 14 30                               sui 30H         ; convert the ASCII decimal digit in A to binary
     837/24DB : C8                                  mov b,a         ; save the decimal digit in B
     838/24DC :                                 
     839/24DC : DD                                  mov d,h
     840/24DD : E6                                  mov e,l         ; copy HL into DE
     841/24DE :                                 
     842/24DE :                                     ; double HL (effectively multiplying HL by 2)
     843/24DE : C6                                  mov a,l
     844/24DF : 86                                  add l
     845/24E0 : F0                                  mov l,a
     846/24E1 : C5                                  mov a,h
     847/24E2 : 8D                                  adc h
     848/24E3 : E8                                  mov h,a
     849/24E4 :                         
     850/24E4 :                                     ; double HL again (effectively multiplying HL by 4)
     851/24E4 : C6                                  mov a,l
     852/24E5 : 86                                  add l
     853/24E6 : F0                                  mov l,a
     854/24E7 : C5                                  mov a,h
     855/24E8 : 8D                                  adc h
     856/24E9 : E8                                  mov h,a
     857/24EA :                                 
     858/24EA :                                     ; add DE (containing the original value of HL) to HL (effectively multiplying HL by 5)
     859/24EA : C6                                  mov a,l
     860/24EB : 84                                  add e
     861/24EC : F0                                  mov l,a
     862/24ED : C5                                  mov a,h
     863/24EE : 8B                                  adc d
     864/24EF : E8                                  mov h,a
     865/24F0 :                                 
     866/24F0 :                                     ; double HL again (effectively multiplying HL by 10)
     867/24F0 : C6                                  mov a,l
     868/24F1 : 86                                  add l
     869/24F2 : F0                                  mov l,a
     870/24F3 : C5                                  mov a,h
     871/24F4 : 8D                                  adc h
     872/24F5 : E8                                  mov h,a
     873/24F6 :                                 
     874/24F6 :                                     ; add the new digit (saved in B) to HL
     875/24F6 : C6                                  mov a,l
     876/24F7 : 81                                  add b
     877/24F8 : F0                                  mov l,a
     878/24F9 : C5                                  mov a,h
     879/24FA : 1E 00                               mvi d,0
     880/24FC : 8B                                  adc d
     881/24FD : E8                                  mov h,a         
     882/24FE :                                 
     883/24FE : 44 B9 24                            jmp get_dec1      ; go back for the next decimal digit
     884/2501 :                                     
     885/2501 :                         ;------------------------------------------------------------------------        
     886/2501 :                         ; print the 8 bit binary number in A as three decimal digits.
     887/2501 :                         ; leading zeros are suppressed.
     888/2501 :                         ; uses A, BC and DE.
     889/2501 :                         ;------------------------------------------------------------------------        
     890/2501 : 26 00                   prndec8:    mvi e,0         ; clear the leading zero flag (suppress zeros)
     891/2503 : 1E 64                               mvi d,100       ; power of 10, starts as 100
     892/2505 : 16 2F                   prndec8a:   mvi c,'0'-1     ; C serves as the counter (starts at 1 less than ascii zero)
     893/2507 : 10                      prndec8b:   inr c
     894/2508 : 93                                  sub d           ; subtract power of 10
     895/2509 : 40 07 25                            jnc prndec8b    ; go back for another subtraction if the difference is still positive
     896/250C : 83                                  add d           ; else , add back the power of 10
     897/250D : C8                                  mov b,a         ; save the difference in B
     898/250E : C2                                  mov a,c         ; get the counter from C
     899/250F : 3C 31                               cpi '1'         ; is it zero?
     900/2511 : 40 1A 25                            jnc prndec8c    ; jump if the counter is greater than ascii zero
     901/2514 : C4                                  mov a,e         ; recall the leading zero flag from E
     902/2515 : B0                                  ora a           ; set flags according to the leading zero flag
     903/2516 : C2                                  mov a,c         ; restore the counter from C
     904/2517 : 68 1F 25                            jz prndec8d     ; skip printing the digit if the leading zero flag is zero
     905/251A : 46 DC 2F                prndec8c:   call putch      ; else, print the digit
     906/251D : 26 FF                               mvi e,0FFH      ; set the leading zero flag
     907/251F : C3                      prndec8d:   mov a,d
     908/2520 : 14 5A                               sui 90          ; reduce power of ten from 100 to 10
     909/2522 : D8                                  mov d,a
     910/2523 : C1                                  mov a,b         ; recall the difference from B
     911/2524 : 40 05 25                            jnc prndec8a    ; go back for the tens digit
     912/2527 : 04 30                               adi '0'         ; else, convert the ones digit to ascii
     913/2529 : 46 DC 2F                            call putch      ; print the last digit
     914/252C : 07                                  ret
     915/252D :                                 
     916/252D :                         ;------------------------------------------------------------------------                
     917/252D :                         ; print the 16 bit binary number in HL as five decimal digits.
     918/252D :                         ; leading zeros are suppressed.
     919/252D :                         ; uses A, HL, BC and DE.
     920/252D :                         ;------------------------------------------------------------------------        
     921/252D : 0E 00                   prndec16:   mvi b,0         ; clear the leading zero flag
     922/252F : 1E 27                               mvi d,027H
     923/2531 : 26 10                               mvi e,010H      ; DE now contains 10000
     924/2533 : 46 51 25                            call subtr      ; count and print the ten thousands digit
     925/2536 : 1E 03                               mvi d,003H
     926/2538 : 26 E8                               mvi e,0E8H      ; DE now contains 1000
     927/253A : 46 51 25                            call subtr      ; count and print the thousands digit
     928/253D : 1E 00                               mvi d,000H
     929/253F : 26 64                               mvi e,064H      ; DE now contains 100
     930/2541 : 46 51 25                            call subtr      ; count and print the hundreds digit
     931/2544 : 1E 00                               mvi d,000H
     932/2546 : 26 0A                               mvi e,00AH      ; DE now contains 10
     933/2548 : 46 51 25                            call subtr      ; count and print the tens digit
     934/254B : C6                                  mov a,l         ; get the units digit
     935/254C : 04 30                               adi '0'         ; convert the units digit to ascii
     936/254E : 44 DC 2F                            jmp putch       ; print the units digit
     937/2551 :                                 
     938/2551 :                         ; count and print the number of times the power of ten in DE can be subtracted from HL
     939/2551 : 16 2F                   subtr:      mvi c,'0'-1     ; initialize the counter in C
     940/2553 : 10                      subtr1:     inr c           ; increment the counter
     941/2554 : C6                                  mov a,l
     942/2555 : 94                                  sub e           ; subtract E from L
     943/2556 : F0                                  mov l,a
     944/2557 : C5                                  mov a,h
     945/2558 : 9B                                  sbb d           ; subtract D from H
     946/2559 : E8                                  mov h,a
     947/255A : 40 53 25                            jnc subtr1      ; continue subtracting until underflow
     948/255D :                                 
     949/255D :                                     ; underflow occured, add the power of ten back to HL
     950/255D : C6                                  mov a,l
     951/255E : 84                                  add e           ; add E back to L
     952/255F : F0                                  mov l,a
     953/2560 : C5                                  mov a,h
     954/2561 : 8B                                  adc d           ; add D back to H
     955/2562 : E8                                  mov h,a
     956/2563 : C2                                  mov a,c
     957/2564 :                                 
     958/2564 :                                     ; check for zero
     959/2564 : 3C 31                               cpi '1'
     960/2566 : 40 70 25                            jnc subtr2      ; jump if the count in C is greater than zero
     961/2569 : C1                                  mov a,b         ; else, recall the leading zero flag
     962/256A : B0                                  ora a           ; set flags
     963/256B : C2                                  mov a,c         ; recall the count
     964/256C : 2B                                  rz              ; return if the leading zero is zero
     965/256D : 44 DC 2F                            jmp putch       ; else, print the digit
     966/2570 :                                 
     967/2570 : 0E FF                   subtr2:     mvi b,0FFH      ; set the leading zero flag
     968/2572 : 44 DC 2F                            jmp putch       ; print the digit
     969/2575 :                                    
     970/2575 :                         ;------------------------------------------------------------------------
     971/2575 :                         ; reads four hex digits from the serial port and converts them into two
     972/2575 :                         ; bytes returned in H and L.  enter key exits with fewer than four digits.
     973/2575 :                         ; returns with carry flag set if escape key is pressed.
     974/2575 :                         ; in addition to H and L, uses A, BC and E.
     975/2575 :                         ;------------------------------------------------------------------------
     976/2575 : 46 55 26                get_four:   call get_hex            ; get the first character
     977/2578 : 40 8A 25                            jnc get_four2           ; not space, enter nor escape
     978/257B : 3C 1B                               cpi 1BH                 ; escape key?
     979/257D : 48 75 25                            jnz get_four            ; go back for another try
     980/2580 : 06 01                   get_four1:  mvi a,1
     981/2582 : 0A                                  rrc                     ; set the carry flag
     982/2583 : 06 1B                               mvi a,1BH
     983/2585 : 2E 00                               mvi h,0
     984/2587 : 36 00                               mvi l,0
     985/2589 : 07                                  ret                     ; return with escape in A and carry set
     986/258A :                         ; the first digit is a valid hex digit 0-F
     987/258A : 46 B2 26                get_four2:  call ascii2hex          ; convert to hex nibble
     988/258D : 02                                  rlc                     ; rotate into the most significant nibble
     989/258E : 02                                  rlc
     990/258F : 02                                  rlc
     991/2590 : 02                                  rlc
     992/2591 : 24 F0                               ani 0F0H                ; mast out least signifficant nibble
     993/2593 : F0                                  mov l,a                 ; save the first nibble in L
     994/2594 :                                     
     995/2594 :                         ; get the second character            
     996/2594 : 46 55 26                get_four3:  call get_hex            ; get the second character
     997/2597 : 40 B0 25                            jnc get_four5
     998/259A : 3C 1B                               cpi 1BH                 ; escape key?
     999/259C : 68 80 25                            jz get_four1
    1000/259F : 3C 0D                               cpi 0DH                 ; enter key?
    1001/25A1 : 48 94 25                            jnz get_four3
    1002/25A4 : C6                                  mov a,l                 ; recall the first nibble from L
    1003/25A5 : 0A                                  rrc                     ; rotate back to least significant nibble
    1004/25A6 : 0A                                  rrc
    1005/25A7 : 0A                                  rrc
    1006/25A8 : 0A                                  rrc
    1007/25A9 : 24 0F                               ani 0FH                 ; mask out most significant nibble
    1008/25AB : F0                                  mov l,a                 ; put the first digit in L
    1009/25AC : 2E 00                   get_four4:  mvi h,0                 ; clear H
    1010/25AE : 90                                  sub a                   ; clear the carry flag
    1011/25AF : 07                                  ret
    1012/25B0 :                                     
    1013/25B0 :                         ; the second character is a valid hex digit 0-F            
    1014/25B0 : 46 B2 26                get_four5:  call ascii2hex          ; convert to hex nibble
    1015/25B3 : 24 0F                               ani 0FH                 ; mask out the most significant bits
    1016/25B5 : B6                                  ora l                   ; combine the two nibbles
    1017/25B6 : F0                                  mov l,a                 ; save the first two digits in L
    1018/25B7 :                         
    1019/25B7 :                         ; the first two digits are in L. get the third character
    1020/25B7 : 46 55 26                get_four6:  call get_hex            ; get the third character
    1021/25BA : 40 CA 25                            jnc get_four7           ; not space, escape nor enter
    1022/25BD : 3C 1B                               cpi 1BH                 ; escape key?
    1023/25BF : 68 80 25                            jz get_four1
    1024/25C2 : 3C 0D                               cpi 0DH                 ; enter key?
    1025/25C4 : 48 B7 25                            jnz get_four6           ; go back for another try
    1026/25C7 : 44 AC 25                            jmp get_four4           ; exit with carry set
    1027/25CA :                                     
    1028/25CA :                         ; the third character is a valid hex digit 0-F            
    1029/25CA : 46 B2 26                get_four7:  call ascii2hex          ; convert to hex nibble
    1030/25CD : 02                                  rlc                     ; rotate into the most significant nibble
    1031/25CE : 02                                  rlc
    1032/25CF : 02                                  rlc
    1033/25D0 : 02                                  rlc
    1034/25D1 : 24 F0                               ani 0F0H                ; mast out least signifficant nibble
    1035/25D3 : E8                                  mov h,a                 ; save the nibble in H
    1036/25D4 :                         
    1037/25D4 :                         ; the first two digits are in L. the third digit is in H. get the fourth character
    1038/25D4 : 46 55 26                get_four8:  call get_hex            ; get the fourth character
    1039/25D7 : 40 01 26                            jnc get_four9
    1040/25DA : 3C 1B                               cpi 1BH                 ; escape key?
    1041/25DC : 68 80 25                            jz get_four1
    1042/25DF : 3C 0D                               cpi 0DH                 ; enter key?
    1043/25E1 : 48 D4 25                            jnz get_four8           ; go back for another try
    1044/25E4 :                         
    1045/25E4 :                         ; enter key pressed...            
    1046/25E4 : C5                                  mov a,h                 ; retrieve the third digit from H
    1047/25E5 : 0A                                  rrc                     ; rotate the third digit back to least significant nibble
    1048/25E6 : 0A                                  rrc
    1049/25E7 : 0A                                  rrc
    1050/25E8 : 0A                                  rrc
    1051/25E9 : 24 0F                               ani 0FH                 ; mask out most significant nibble
    1052/25EB : E8                                  mov h,a
    1053/25EC :                         ; the first two digits are in L, the third digit is in H
    1054/25EC : CD                                  mov b,h                 ; save the third digit in B
    1055/25ED : D6                                  mov c,l                 ; save the first two digits in C
    1056/25EE :                                     
    1057/25EE : C6                                  mov a,l
    1058/25EF : 02                                  rlc                     ; rotate the second digit to the most sifnificant nibble
    1059/25F0 : 02                                  rlc
    1060/25F1 : 02                                  rlc
    1061/25F2 : 02                                  rlc
    1062/25F3 : 24 F0                               ani 0F0H                ; mask bits
    1063/25F5 : B5                                  ora h                   ; combine the second and third digits
    1064/25F6 : F0                                  mov l,a                 ; second and third digits now in L
    1065/25F7 :                                     
    1066/25F7 : C2                                  mov a,c                 ; get the first two digits from C
    1067/25F8 : 0A                                  rrc                     ; rotate the first digit to the least significant nibble
    1068/25F9 : 0A                                  rrc
    1069/25FA : 0A                                  rrc
    1070/25FB : 0A                                  rrc
    1071/25FC : 24 0F                               ani 0FH                 ; mask out the most significant bits
    1072/25FE : E8                                  mov h,a                 ; first digit now in H
    1073/25FF : 90                                  sub a                   ; clear the carry flag
    1074/2600 : 07                                  ret
    1075/2601 :                                     
    1076/2601 :                         ; the fourth character is a valid hex digit 0-F            
    1077/2601 : 46 B2 26                get_four9:  call ascii2hex          ; convert to hex nibble
    1078/2604 : 24 0F                               ani 0FH                 ; mask out the most significant bits
    1079/2606 : B5                                  ora h                   ; combine the two nibbles
    1080/2607 : D6                                  mov c,l                 ; save the first two digits in C
    1081/2608 : F0                                  mov l,a                 ; save the last two digits in L
    1082/2609 : EA                                  mov h,c                 ; save the first two digits in H
    1083/260A : 90                                  sub a                   ; clear the carry flag
    1084/260B : 07                                  ret
    1085/260C :                         
    1086/260C :                         ;------------------------------------------------------------------------
    1087/260C :                         ; get two hex digits from the serial port and convert them into a
    1088/260C :                         ; byte returned in A.  enter key exits if fewer than two digits.
    1089/260C :                         ; returns with carry flag set if escape key is pressed.
    1090/260C :                         ; uses A, BC and E
    1091/260C :                         ;------------------------------------------------------------------------
    1092/260C : 46 55 26                get_two:    call get_hex            ; get the first character
    1093/260F : 60 3C 26                            jc get_two5             ; jump if space, enter or escape
    1094/2612 :                         
    1095/2612 :                         ; the first character is a valid hex digit 0-F
    1096/2612 : 46 B2 26                            call ascii2hex          ; convert to hex nibble
    1097/2615 : 02                                  rlc                     ; rotate into the most significant nibble
    1098/2616 : 02                                  rlc
    1099/2617 : 02                                  rlc
    1100/2618 : 02                                  rlc
    1101/2619 : 24 F0                               ani 0F0H                ; mast out least signifficant nibble
    1102/261B : D0                                  mov c,a                 ; save the first digit in C as the most significant nibble
    1103/261C :                                     
    1104/261C : 46 55 26                            call get_hex            ; get the second character
    1105/261F : 40 32 26                            jnc get_two2
    1106/2622 : 3C 0D                               cpi 0DH                 ; enter key?
    1107/2624 : 48 3C 26                            jnz get_two5            ; jump if space or escape
    1108/2627 : C2                                  mov a,c                 ; retrieve the first digit
    1109/2628 : 0A                                  rrc                     ; rotate the first digit back the the least significant nibble
    1110/2629 : 0A                                  rrc
    1111/262A : 0A                                  rrc
    1112/262B : 0A                                  rrc
    1113/262C : 24 0F                               ani 0FH                 ; mask out the most significant nibble
    1114/262E : C8                                  mov b,a                 ; save the first digit in B
    1115/262F : 44 39 26                            jmp get_two3
    1116/2632 :                                     
    1117/2632 :                         ; the second character is a valid hex digit 0-F            
    1118/2632 : 46 B2 26                get_two2:   call ascii2hex          ; convert to hex nibble
    1119/2635 : 24 0F                               ani 0FH                 ; mask out the most significant bits
    1120/2637 : B2                                  ora c                   ; combine the two nibbles
    1121/2638 : C8                                  mov b,a
    1122/2639 : 90                      get_two3:   sub a                   ; clear the carry flag
    1123/263A : C1                                  mov a,b
    1124/263B : 07                                  ret
    1125/263C :                         
    1126/263C :                         ; return with carry flag set
    1127/263C : C8                      get_two5:   mov b,a
    1128/263D : 06 01                               mvi a,1
    1129/263F : 0A                                  rrc                     ; set the carry flag
    1130/2640 : C1                                  mov a,b
    1131/2641 : 07                                  ret
    1132/2642 :                         
    1133/2642 : 46 55 26                get_one:    call get_hex
    1134/2645 : 60 4F 26                            jc get_one_err
    1135/2648 : 46 B2 26                            call ascii2hex
    1136/264B : C8                                  mov b,a
    1137/264C : 90                                  sub a                   ; clear the carry flag
    1138/264D : C1                                  mov a,b
    1139/264E : 07                                  ret
    1140/264F :                         get_one_err: 
    1141/264F : C8                                  mov b,a
    1142/2650 : 06 01                               mvi a,1
    1143/2652 : 0A                                  rrc                     ; set the carry flag
    1144/2653 : C1                                  mov a,b
    1145/2654 : 07                                  ret
    1146/2655 :                                     
    1147/2655 :                                     
    1148/2655 :                         ;------------------------------------------------------------------
    1149/2655 :                         ; get an ASCII hex character 0-F in A from the serial port.
    1150/2655 :                         ; echo the character if it's a valid hex digit.
    1151/2655 :                         ; return with the carry flag set if ENTER, ESCAPE, or SPACE
    1152/2655 :                         ; uses A, B, and E
    1153/2655 :                         ;------------------------------------------------------------------
    1154/2655 : 46 ED 2F                get_hex:    call getch          
    1155/2658 : 24 7F                               ani 01111111B           ; mask out most significant bit
    1156/265A : 3C 0D                               cpi 0DH
    1157/265C : 68 8B 26                            jz get_hex3             ; jump if enter key
    1158/265F : 3C 1B                               cpi 1BH
    1159/2661 : 68 8B 26                            jz get_hex3             ; jump if escape key
    1160/2664 : 3C 20                               cpi 20H
    1161/2666 : 68 8B 26                            jz get_hex3             ; jump if space
    1162/2669 : 3C 30                               cpi '0'
    1163/266B : 60 55 26                            jc get_hex              ; try again if less than '0'
    1164/266E : 3C 61                               cpi 'a'
    1165/2670 : 60 75 26                            jc get_hex1             ; jump if already upper case...
    1166/2673 : 14 20                               sui 20H                 ; else convert to upper case
    1167/2675 : 3C 47                   get_hex1:   cpi 'G'
    1168/2677 : 40 55 26                            jnc get_hex             ; try again if greater than 'F'
    1169/267A : 3C 3A                               cpi ':'
    1170/267C : 60 84 26                            jc get_hex2             ; continue if '0'-'9'
    1171/267F : 3C 41                               cpi 'A'
    1172/2681 : 60 55 26                            jc get_hex              ; try again if less than 'A'
    1173/2684 :                                     
    1174/2684 : C8                      get_hex2:   mov b,a                 ; save the character in B
    1175/2685 : 46 DC 2F                            call putch              ; echo the character
    1176/2688 : 90                                  sub a                   ; clear the carry flag
    1177/2689 : C1                                  mov a,b                 ; restore the character
    1178/268A : 07                                  ret                     ; return with carry cleared and character in a
    1179/268B :                         
    1180/268B : C8                      get_hex3:   mov b,a
    1181/268C : 06 01                               mvi a,1
    1182/268E : 0A                                  rrc                     ; set carry flag
    1183/268F : C1                                  mov a,b
    1184/2690 : 07                                  ret                     ; return with carry set and character in a  
    1185/2691 :                                     
    1186/2691 :                         ;-------------------------------------------------------------------------
    1187/2691 :                         ; write the byte in A to the serial port as two ASCII hex characters.
    1188/2691 :                         ; uses A, D and E.
    1189/2691 :                         ;-------------------------------------------------------------------------
    1190/2691 : D8                      write_hex:  mov d,a                 ; save the byte in D
    1191/2692 : 0A                                  rrc                     ; rotate most significant nibble into lower 4 bits
    1192/2693 : 0A                                  rrc
    1193/2694 : 0A                                  rrc
    1194/2695 : 0A                                  rrc
    1195/2696 : 46 A4 26                            call hex2ascii          ; convert the most significand digit to ascii
    1196/2699 : 46 DC 2F                            call putch              ; print the most significant digit
    1197/269C : C3                                  mov a,d                 ; restore
    1198/269D : 46 A4 26                            call hex2ascii
    1199/26A0 : 46 DC 2F                            call putch
    1200/26A3 : 07                                  ret
    1201/26A4 :                         
    1202/26A4 :                         ;------------------------------------------------------------------------
    1203/26A4 :                         ; convert the lower nibble in A to an ASCII hex character returned in A.
    1204/26A4 :                         ; uses A and E.
    1205/26A4 :                         ;------------------------------------------------------------------------
    1206/26A4 : 24 0F                   hex2ascii:  ani 0FH                 ; mask all but the lower nibble
    1207/26A6 : E0                                  mov e,a                 ; save the nibble in E
    1208/26A7 : 14 0A                               sui 10
    1209/26A9 : C4                                  mov a,e
    1210/26AA : 60 AF 26                            jc hex2ascii1           ; jump if the nibble is less than 10
    1211/26AD : 04 07                               adi 7                   ; add 7 to convert to A-F
    1212/26AF : 04 30                   hex2ascii1: adi 30H
    1213/26B1 : 07                                  ret
    1214/26B2 :                                     
    1215/26B2 :                         ;------------------------------------------------------------------------
    1216/26B2 :                         ; convert an ascii character in A to its hex equivalent.
    1217/26B2 :                         ; return value in lower nibble, upper nibble zeros
    1218/26B2 :                         ; uses A and E.
    1219/26B2 :                         ;------------------------------------------------------------------------
    1220/26B2 : 3C 61                   ascii2hex:  cpi 'a'
    1221/26B4 : 60 B9 26                            jc ascii2hex1           ; jump if already upper case...
    1222/26B7 : 14 20                               sui 20H                 ; else convert to upper case
    1223/26B9 : 14 30                   ascii2hex1: sui 30H
    1224/26BB : E0                                  mov e,a                 ; save the result in b
    1225/26BC : 14 0A                               sui 0AH                 ; subtract 10 decimal
    1226/26BE : 60 C5 26                            jc  ascii2hex2
    1227/26C1 : C4                                  mov a,e                 ; restore the value
    1228/26C2 : 14 07                               sui 7
    1229/26C4 : E0                                  mov e,a
    1230/26C5 : C4                      ascii2hex2: mov a,e
    1231/26C6 : 07                                  ret            
    1232/26C7 :                                     
    1233/26C7 :                         ;------------------------------------------------------------------------        
    1234/26C7 :                         ; serially print carrage return and line feed
    1235/26C7 :                         ; uses A and E.
    1236/26C7 :                         ;------------------------------------------------------------------------
    1237/26C7 : 06 0D                   crlf:       mvi a,0DH
    1238/26C9 : 46 DC 2F                            call putch
    1239/26CC : 06 0A                               mvi a,0AH
    1240/26CE : 44 DC 2F                            jmp putch
    1241/26D1 :                                     
    1242/26D1 :                         ;------------------------------------------------------------------------        
    1243/26D1 :                         ; serially print a space
    1244/26D1 :                         ; uses A and E.
    1245/26D1 :                         ;------------------------------------------------------------------------
    1246/26D1 : 06 20                   space:      mvi a,' '
    1247/26D3 : 44 DC 2F                            jmp putch            
    1248/26D6 :                         
    1249/26D6 :                         ;------------------------------------------------------------------------        
    1250/26D6 :                         ; serially print the null terminated string whose address is in HL.
    1251/26D6 :                         ; uses A and E and HL      
    1252/26D6 :                         ;------------------------------------------------------------------------
    1253/26D6 : C7                      puts:       mov a,m
    1254/26D7 : A0                                  ana a
    1255/26D8 : 2B                                  rz                      ; end of string
    1256/26D9 : 46 DC 2F                            call putch
    1257/26DC : 30                                  inr l                   ; next character
    1258/26DD : 48 D6 26                            jnz puts
    1259/26E0 : 28                                  inr h
    1260/26E1 : 44 D6 26                            jmp puts
    1261/26E4 :                         
    1262/26E4 :                         ;------------------------------------------------------------------------        
    1263/26E4 :                         ; Includes the right serial library, depending on defines
    1264/26E4 :                         ;------------------------------------------------------------------------
    1265/26E4 :                         
    1266/26E4 :                                     include "serial.inc"
(1)    1/26E4 :                         ;------------------------------------------------------------------------        
(1)    2/26E4 :                         ; include serial library
(1)    3/26E4 :                         ;
(1)    4/26E4 :                         ; define one of the following to control the build
(1)    5/26E4 :                         ;    * frontpanel - build with frontpanel and 16450
(1)    6/26E4 :                         ;    * ser16450 - build with 16450 but not frontpanel
(1)    7/26E4 :                         ;    * bitbang - build with bitbang without frontpanel
(1)    8/26E4 :                         ;    * ser8251 - build with 8251 from the tape board without front panel
(1)    9/26E4 :                         ;
(1)   10/26E4 :                         ; additional defines
(1)   11/26E4 :                         ;    * nocinpne - omit the CINPNE function
(1)   12/26E4 :                         ;    * nocinp - omit the CINP function
(1)   13/26E4 :                         ;    * nocinp80 - omit setting the high bit on CINP/CINPNE
(1)   14/26E4 :                         ;    * nofrontpanel - removes the frontpanel from frontpanel_isr
(1)   15/26E4 :                         ;------------------------------------------------------------------------
(1)   16/26E4 :                         
(1)   17/26E4 :                                     include "h8.inc"
(2)    1/26E4 : =>UNDEFINED                          ifndef   inch8    ; avoid multiple inclusion
(2)    2/26E4 : =1H                     inch8     equ      1
(2)    3/26E4 :                         
(2)    4/26E4 :                         ;; constants for H8 port mapping
(2)    5/26E4 :                         ;; Scott Baker, https://www.smbaker.com/
(2)    6/26E4 :                         
(2)    7/26E4 : =1H                     ipoll:      equ 01H
(2)    8/26E4 :                         
(2)    9/26E4 : =2H                     h8_in2:     equ 02H
(2)   10/26E4 : =3H                     h8_in3:     equ 03H
(2)   11/26E4 : =4H                     h8_in4:     equ 04H
(2)   12/26E4 : =5H                     h8_in5:     equ 05H
(2)   13/26E4 : =6H                     h8_in6:     equ 06H
(2)   14/26E4 : =7H                     h8_in7:     equ 07H
(2)   15/26E4 :                         
(2)   16/26E4 : =10H                    h8_out0:    equ 10H
(2)   17/26E4 : =11H                    h8_out1:    equ 11H
(2)   18/26E4 : =12H                    h8_out2:    equ 12H
(2)   19/26E4 : =13H                    h8_out3:    equ 13H
(2)   20/26E4 : =14H                    h8_out4:    equ 14H
(2)   21/26E4 : =15H                    h8_out5:    equ 15H
(2)   22/26E4 : =16H                    h8_out6:    equ 16H
(2)   23/26E4 : =17H                    h8_out7:    equ 17H
(2)   24/26E4 :                         
(2)   25/26E4 : =18H                    mm_io0:    equ 18H
(2)   26/26E4 : =19H                    mm_io1:    equ 19H
(2)   27/26E4 : =1AH                    mm_io2:    equ 1AH
(2)   28/26E4 : =1BH                    mm_io3:    equ 1BH
(2)   29/26E4 : =1CH                    mm_io4:    equ 1CH
(2)   30/26E4 : =1DH                    mm_io5:    equ 1DH
(2)   31/26E4 : =1EH                    mm_io6:    equ 1EH
(2)   32/26E4 : =1FH                    mm_io7:    equ 1FH
(2)   33/26E4 :                         
(2)   34/26E4 : =0F0H                   h8_digsel: equ 0F0H
(2)   35/26E4 : =0F1H                   h8_digval: equ 0F1H
(2)   36/26E4 :                         
(2)   37/26E4 : =14H                    fp_digsel: equ h8_out4
(2)   38/26E4 : =15H                    fp_digval: equ h8_out5
(2)   39/26E4 : =4H                     fp_kbd:    equ h8_in4
(2)   40/26E4 :                         
(2)   41/26E4 : [1]                                 endif                ; inch8
(1)   18/26E4 :                         
(1)   19/26E4 :                         ;; avoid a proliferation of ifdefs, and just define this stub to stand in
(1)   20/26E4 :                         ;; for the frontpanel functions.
(1)   21/26E4 :                         
(1)   22/26E4 : 07                      EMPTYFUNC:  ret
(1)   23/26E5 :                         
(1)   24/26E5 :                         ;; front panel with 16450
(1)   25/26E5 :                         
(1)   26/26E5 : =>UNDEFINED                         ifdef frontpanel
(1)   27/26E5 :                                     include "fpanelvar.inc"
(1)   28/26E5 :                                     include "16450.inc"
(1)   29/26E5 :                                     include "fpanpoll-16450.inc"
(1)   30/26E5 :                                     ifdef sbcfp
(1)   31/26E5 :                                     include "fpanel-sbc.inc"
(1)   32/26E5 :                                     else
(1)   33/26E5 :                                     include "fpanel.inc"
(1)   34/26E5 : [30]                                endif
(1)   35/26E5 :                         SINIT:      equ SINIT450
(1)   36/26E5 :                                     ifndef nocinp
(1)   37/26E5 :                         CINP:       equ CINP450
(1)   38/26E5 : [36]                                endif
(1)   39/26E5 :                                     ifndef nocinpne
(1)   40/26E5 :                         CINPNE:     equ FCINP450
(1)   41/26E5 : [39]                                endif
(1)   42/26E5 :                         CPRINT:     equ CPRINT450
(1)   43/26E5 :                         CRDY:       equ CRDY450
(1)   44/26E5 : [26]                                endif
(1)   45/26E5 :                         
(1)   46/26E5 :                         ;; front panel with interrupts
(1)   47/26E5 :                         
(1)   48/26E5 : =>UNDEFINED                         ifdef frontpanel_isr
(1)   49/26E5 :                                     include "fpanelvar.inc"
(1)   50/26E5 :                                     include "fpanisr.inc"
(1)   51/26E5 :                                     ifndef nofrontpanel
(1)   52/26E5 :                                     include "fpanel.inc"
(1)   53/26E5 : [51]                                endif
(1)   54/26E5 :                                     include "16450.inc"
(1)   55/26E5 :                         SINIT:      equ SINIT450
(1)   56/26E5 :                                     ifndef nocinp
(1)   57/26E5 :                         CINP:       equ CINP450
(1)   58/26E5 : [56]                                endif
(1)   59/26E5 :                                     ifndef nocinpne
(1)   60/26E5 :                         CINPNE:     equ CINP450NE
(1)   61/26E5 : [59]                                endif
(1)   62/26E5 :                         CPRINT:     equ CPRINT450
(1)   63/26E5 :                         CRDY:       equ CRDY450
(1)   64/26E5 : [48]                                endif
(1)   65/26E5 :                         
(1)   66/26E5 :                         ;; just the 16450
(1)   67/26E5 :                         
(1)   68/26E5 : =>UNDEFINED                         ifdef ser16450
(1)   69/26E5 :                                     include "16450.inc"
(1)   70/26E5 :                         SINIT:      equ SINIT450
(1)   71/26E5 :                                     ifndef nocinp
(1)   72/26E5 :                         CINP:       equ CINP450
(1)   73/26E5 : [71]                                endif
(1)   74/26E5 :                                     ifndef nocinpne
(1)   75/26E5 :                         CINPNE:     equ CINP450NE
(1)   76/26E5 : [74]                                endif
(1)   77/26E5 :                         CPRINT:     equ CPRINT450
(1)   78/26E5 :                         CRDY:       equ CRDY450
(1)   79/26E5 :                         FPANINIT:   equ EMPTYFUNC
(1)   80/26E5 :                         FPDISABLE:  equ EMPTYFUNC
(1)   81/26E5 :                         FPENABLE:   equ EMPTYFUNC
(1)   82/26E5 : [68]                                endif
(1)   83/26E5 :                         
(1)   84/26E5 :                         ;; just the bit-bang serial
(1)   85/26E5 :                         
(1)   86/26E5 : =>UNDEFINED                         ifdef bitbang
(1)   87/26E5 :                                     include "bbser.inc"
(1)   88/26E5 :                         SINIT:      equ SINITBB
(1)   89/26E5 :                                     ifndef nocinp
(1)   90/26E5 :                         CINP:       equ CINPBB
(1)   91/26E5 : [89]                                endif
(1)   92/26E5 :                                     ifndef nocinpne
(1)   93/26E5 :                         CINPNE:     equ CINPNEBB
(1)   94/26E5 : [92]                                endif
(1)   95/26E5 :                         CPRINT:     equ CPRINTBB
(1)   96/26E5 :                         CRDY:       equ CRDYBB
(1)   97/26E5 :                         FPANINIT:   equ EMPTYFUNC
(1)   98/26E5 :                         FPDISABLE:  equ EMPTYFUNC
(1)   99/26E5 :                         FPENABLE:   equ EMPTYFUNC
(1)  100/26E5 : [86]                                endif
(1)  101/26E5 :                         
(1)  102/26E5 :                         ;; just the scelbi serial
(1)  103/26E5 :                         
(1)  104/26E5 : =>UNDEFINED                         ifdef serscel
(1)  105/26E5 :                                     include "bbscelbi.inc"
(1)  106/26E5 :                         SINIT:      equ SINITSCEL
(1)  107/26E5 :                         CINP:       equ CINPSCEL
(1)  108/26E5 :                         CPRINT:     equ CPRINTSCEL
(1)  109/26E5 :                         FPANINIT:   equ EMPTYFUNC
(1)  110/26E5 :                         FPDISABLE:  equ EMPTYFUNC
(1)  111/26E5 :                         FPENABLE:   equ EMPTYFUNC
(1)  112/26E5 : [104]                               endif
(1)  113/26E5 :                         
(1)  114/26E5 :                         ;; just the 8251 console
(1)  115/26E5 :                         
(1)  116/26E5 : =>DEFINED                           ifdef ser8251
(1)  117/26E5 :                                     include "8251-cons.inc"
(2)    1/26E5 : =>UNDEFINED                          ifndef   inccons    ; avoid multiple inclusion
(2)    2/26E5 : =1H                     inccons      equ      1
(2)    3/26E5 :                         
(2)    4/26E5 :                         ;-----------------------------------------------------------------------------------------       
(2)    5/26E5 :                         ; I/O routines for Console UART in Heathkit H8
(2)    6/26E5 :                         ;
(2)    7/26E5 :                         ; Scott Baker, https://www.smbaker.com
(2)    8/26E5 :                         ;-----------------------------------------------------------------------------------------
(2)    9/26E5 :                         
(2)   10/26E5 : =0FAH                   h8_cons_d: equ 0FAH
(2)   11/26E5 : =0FBH                   h8_cons_c: equ 0FBH
(2)   12/26E5 :                         
(2)   13/26E5 : =12H                    cons_thr:  equ h8_out2
(2)   14/26E5 : =13H                    cons_mode: equ h8_out3
(2)   15/26E5 : =13H                    cons_cmd:  equ cons_mode
(2)   16/26E5 :                         
(2)   17/26E5 : =2H                     cons_rhr:  equ h8_in2
(2)   18/26E5 : =3H                     cons_stat: equ h8_in3
(2)   19/26E5 :                         
(2)   20/26E5 :                         rts_on      macro
(2)   21/26E5 :                                     ifndef no_rts_flow
(2)   22/26E5 :                                     mvi a,035H              ; RX enable, TX enable, error reset, RTS-on
(2)   23/26E5 :                                     out cons_cmd           
(2)   24/26E5 :                                     endif
(2)   25/26E5 :                                     endm
(2)   26/26E5 :                         
(2)   27/26E5 :                         rts_off     macro
(2)   28/26E5 :                                     ifndef no_rts_flow
(2)   29/26E5 :                                     mvi a,015H              ; RX enable, TX enable, error reset, RTS-off
(2)   30/26E5 :                                     out cons_cmd     
(2)   31/26E5 :                                     endif
(2)   32/26E5 :                                     endm
(2)   33/26E5 :                         
(2)   34/26E5 :                         do_forceupper macro
(2)   35/26E5 :                                     ifdef forceupper
(2)   36/26E5 :                                     cpi 61H
(2)   37/26E5 :                                     jm notupper
(2)   38/26E5 :                                     cpi 7CH
(2)   39/26E5 :                                     jp notupper
(2)   40/26E5 :                                     ani 0DFH                ; remove uppercase bit
(2)   41/26E5 :                         notupper:
(2)   42/26E5 :                                     endif
(2)   43/26E5 :                                     endm
(2)   44/26E5 :                         
(2)   45/26E5 :                         ;-----------------------------------------------------------------------------------------       
(2)   46/26E5 :                         ; INITTAPE: initialize tape
(2)   47/26E5 :                         ;-----------------------------------------------------------------------------------------
(2)   48/26E5 :                         
(2)   49/26E5 : =>DEFINED               SINIT8251:  ifndef noiomap
(2)   50/26E5 :                                     mvi a,h8_cons_d         ; configure IO mapper
(2)   51/26E5 :                                     out mm_io2
(2)   52/26E5 :                                     mvi a,h8_cons_c
(2)   53/26E5 :                                     out mm_io3
(2)   54/26E5 : [49]                                endif
(2)   55/26E5 :                         
(2)   56/26E5 : 06 00                               mvi a,000H              ; worst case initialization
(2)   57/26E7 : 67                                  out cons_cmd            ; configure sync more
(2)   58/26E8 : C0                                  nop
(2)   59/26E9 : 67                                  out cons_cmd            ; write sync
(2)   60/26EA : C0                                  nop
(2)   61/26EB : 67                                  out cons_cmd            ; write sync
(2)   62/26EC : C0                                  nop
(2)   63/26ED : 06 40                               mvi a,040H
(2)   64/26EF : 67                                  out cons_cmd            ; reset
(2)   65/26F0 : C0                                  nop
(2)   66/26F1 :                         
(2)   67/26F1 : 06 4E                               mvi a,04EH              ; 8 bit, no parity, 1 stop, 16X baud
(2)   68/26F3 : 67                                  out cons_mode
(2)   69/26F4 :                         
(2)   70/26F4 : 06 35                               mvi a,035H              ; RX enable, TX enable, error reset, RTS
(2)   71/26F6 : 67                                  out cons_cmd
(2)   72/26F7 :                         
(2)   73/26F7 : 0E 00                               mvi b,00H               ; reset will sometimes cause framing errors and gibberish
(2)   74/26F9 : 09                      sinit8251w: dcr b                   ; on my ftdi cable. Wait a while before we send out 
(2)   75/26FA : 48 F9 26                            jnz sinit8251w          ; data, to ensure a re-frame.
(2)   76/26FD :                         
(2)   77/26FD : =>UNDEFINED                         ifdef fp8251
(2)   78/26FD :                         
(2)   79/26FD :                                     mvi a,h8_digsel
(2)   80/26FD :                                     out mm_io4
(2)   81/26FD :                                     mvi a,h8_digval
(2)   82/26FD :                                     out mm_io5
(2)   83/26FD :                         
(2)   84/26FD : [77]                                endif
(2)   85/26FD :                         
(2)   86/26FD : 07                                  ret
(2)   87/26FE :                         
(2)   88/26FE :                         ;-----------------------------------------------------------------------------------------       
(2)   89/26FE :                         ; CPRINT8251: Write Console
(2)   90/26FE :                         ;-----------------------------------------------------------------------------------------
(2)   91/26FE :                         
(2)   92/26FE : 24 7F                   CPRINT8251: ani 7fh                 ; mask off the most significant bit of the character
(2)   93/2700 :                         
(2)   94/2700 : =>UNDEFINED                         ifdef nocr
(2)   95/2700 :                                     cpi 00DH
(2)   96/2700 :                                     rz
(2)   97/2700 : [94]                                endif
(2)   98/2700 :                         
(2)   99/2700 : (MACRO)                             do_forceupper
(2)   99/2700 : =>UNDEFINED                         ifdef forceupper
(2)   99/2700 :                                     cpi 61H
(2)   99/2700 :                                     jm notupper
(2)   99/2700 :                                     cpi 7CH
(2)   99/2700 :                                     jp notupper
(2)   99/2700 :                                     ani 0DFH                ; remove uppercase bit
(2)   99/2700 :                         notupper:
(2)   99/2700 : [99]                                endif
(2)  100/2700 :                         
(2)  101/2700 : C8                                  mov b,a                 ; save character to write
(2)  102/2701 : 47                      TXWCONS:    in cons_stat
(2)  103/2702 : 24 01                               ani 1
(2)  104/2704 : 68 01 27                            jz TXWCONS              ; loop while tx busy
(2)  105/2707 :                         
(2)  106/2707 : C1                                  mov a,b                 ; restore character
(2)  107/2708 : 65                                  out cons_thr
(2)  108/2709 : 07                                  ret
(2)  109/270A :                         
(2)  110/270A :                         ;-----------------------------------------------------------------------------------------       
(2)  111/270A :                         ; CINP8251: Read Console and Echo
(2)  112/270A :                         ;-----------------------------------------------------------------------------------------
(2)  113/270A :                         
(2)  114/270A :                         CINP8251:  
(2)  115/270A : 47                      TXWCONS0:   in cons_stat
(2)  116/270B : 24 01                               ani 1
(2)  117/270D : 68 0A 27                            jz TXWCONS0             ; don't receive while the TXH is busy
(2)  118/2710 : 24 02                               ani 2
(2)  119/2712 : 48 1E 27                            jnz CPIN8251_HAVE_CHAR
(2)  120/2715 : (MACRO)                             rts_on
(2)  120/2715 : =>UNDEFINED                         ifndef no_rts_flow
(2)  120/2715 : 06 35                               mvi a,035H              ; RX enable, TX enable, error reset, RTS-on
(2)  120/2717 : 67                                  out cons_cmd           
(2)  120/2718 : [120]                               endif
(2)  121/2718 : 47                      RXWCONS:    in cons_stat
(2)  122/2719 : 24 02                               ani 2
(2)  123/271B : 68 18 27                            jz RXWCONS              ; loop while rx empty
(2)  124/271E :                         CPIN8251_HAVE_CHAR:
(2)  125/271E : (MACRO)                             rts_off
(2)  125/271E : =>UNDEFINED                         ifndef no_rts_flow
(2)  125/271E : 06 15                               mvi a,015H              ; RX enable, TX enable, error reset, RTS-off
(2)  125/2720 : 67                                  out cons_cmd     
(2)  125/2721 : [125]                               endif
(2)  126/2721 : 45                                  in cons_rhr             ; read character
(2)  127/2722 :                                
(2)  128/2722 :                                     ; ----- most of this is for the H9
(2)  129/2722 :                                     
(2)  130/2722 : =>UNDEFINED                         ifndef nostriphigh
(2)  131/2722 : 24 7F                               ani 07FH                ; strip high bit, for H9, otherwise we'll echo it
(2)  132/2724 : [130]                               endif
(2)  133/2724 :                         
(2)  134/2724 : =>UNDEFINED                         ifdef nocr
(2)  135/2724 :                                     cpi 00DH
(2)  136/2724 :                                     jz CINP8251SO
(2)  137/2724 : [134]                               endif
(2)  138/2724 :                         
(2)  139/2724 : (MACRO)                             do_forceupper
(2)  139/2724 : =>UNDEFINED                         ifdef forceupper
(2)  139/2724 :                                     cpi 61H
(2)  139/2724 :                                     jm notupper
(2)  139/2724 :                                     cpi 7CH
(2)  139/2724 :                                     jp notupper
(2)  139/2724 :                                     ani 0DFH                ; remove uppercase bit
(2)  139/2724 :                         notupper:
(2)  139/2724 : [139]                               endif
(2)  140/2724 :                         
(2)  141/2724 :                                     ; ------ end of H9 stuff
(2)  142/2724 :                         
(2)  143/2724 : 65                                  out cons_thr            ; echo it
(2)  144/2725 :                         CINP8251SO:
(2)  145/2725 : =>DEFINED                           ifndef nocinp80
(2)  146/2725 :                                     ori 80h                 ; SCELBAL needs to have the most significant bit set
(2)  147/2725 : [145]                               endif
(2)  148/2725 : 07                                  ret
(2)  149/2726 :                         
(2)  150/2726 :                         ;-----------------------------------------------------------------------------------------       
(2)  151/2726 :                         ; CINP8251: Read Console but do not echo
(2)  152/2726 :                         ;-----------------------------------------------------------------------------------------
(2)  153/2726 :                                 
(2)  154/2726 :                         CINP8251NE:
(2)  155/2726 : 47                      TXWCONS2:   in cons_stat
(2)  156/2727 : 24 01                               ani 1
(2)  157/2729 : 68 26 27                            jz TXWCONS2             ; don't receive while the TXH is busy
(2)  158/272C : 24 02                               ani 2
(2)  159/272E : 48 3A 27                            jnz CPIN8251NE_HAVE_CHAR
(2)  160/2731 : (MACRO)                             rts_on
(2)  160/2731 : =>UNDEFINED                         ifndef no_rts_flow
(2)  160/2731 : 06 35                               mvi a,035H              ; RX enable, TX enable, error reset, RTS-on
(2)  160/2733 : 67                                  out cons_cmd           
(2)  160/2734 : [160]                               endif
(2)  161/2734 : 47                      RXWCONS1:   in cons_stat
(2)  162/2735 : 24 02                               ani 2
(2)  163/2737 : 68 34 27                            jz RXWCONS1             ; loop while rx empty
(2)  164/273A :                         CPIN8251NE_HAVE_CHAR:
(2)  165/273A : (MACRO)                             rts_off
(2)  165/273A : =>UNDEFINED                         ifndef no_rts_flow
(2)  165/273A : 06 15                               mvi a,015H              ; RX enable, TX enable, error reset, RTS-off
(2)  165/273C : 67                                  out cons_cmd     
(2)  165/273D : [165]                               endif
(2)  166/273D : 45                                  in cons_rhr             ; read character     
(2)  167/273E : (MACRO)                             do_forceupper
(2)  167/273E : =>UNDEFINED                         ifdef forceupper
(2)  167/273E :                                     cpi 61H
(2)  167/273E :                                     jm notupper
(2)  167/273E :                                     cpi 7CH
(2)  167/273E :                                     jp notupper
(2)  167/273E :                                     ani 0DFH                ; remove uppercase bit
(2)  167/273E :                         notupper:
(2)  167/273E : [167]                               endif
(2)  168/273E : =>DEFINED                           ifndef nocinp80
(2)  169/273E :                                     ori 80h                 ; SCELBAL needs to have the most significant bit set
(2)  170/273E : [168]                               endif
(2)  171/273E : 07                                  ret
(2)  172/273F :                         
(2)  173/273F :                         ;-----------------------------------------------------------------------------------------       
(2)  174/273F :                         ; CRDY8251: Return nonzero if character waiting
(2)  175/273F :                         ;-----------------------------------------------------------------------------------------
(2)  176/273F :                         
(2)  177/273F : 47                      CRDY8251:   in cons_stat
(2)  178/2740 : 24 02                               ani 2
(2)  179/2742 : 07                                  ret
(2)  180/2743 :                         
(2)  181/2743 : [1]                                 endif                ; inccons
(1)  118/2743 : =26E5H                  SINIT:      equ SINIT8251
(1)  119/2743 : =>UNDEFINED                         ifndef nocinp
(1)  120/2743 : =270AH                  CINP:       equ CINP8251
(1)  121/2743 : [119]                               endif
(1)  122/2743 : =>UNDEFINED                         ifndef nocinpne
(1)  123/2743 : =2726H                  CINPNE:     equ CINP8251NE
(1)  124/2743 : [122]                               endif
(1)  125/2743 : =26FEH                  CPRINT:     equ CPRINT8251
(1)  126/2743 : =273FH                  CRDY:       equ CRDY8251
(1)  127/2743 : =26E4H                  FPANINIT:   equ EMPTYFUNC
(1)  128/2743 : =26E4H                  FPDISABLE:  equ EMPTYFUNC
(1)  129/2743 : =26E4H                  FPENABLE:   equ EMPTYFUNC
(1)  130/2743 : [116]                               endif
(1)  131/2743 :                         
(1)  132/2743 :                         ;; front panel with 8251 console
(1)  133/2743 :                         
(1)  134/2743 : =>UNDEFINED                         ifdef fp8251
(1)  135/2743 :                                     include "fpanelvar.inc"
(1)  136/2743 :                                     include "8251-cons.inc"
(1)  137/2743 :                                     include "fpanpoll-8251.inc"
(1)  138/2743 :                                     ifdef sbcfp
(1)  139/2743 :                                     include "fpanel-sbc.inc"
(1)  140/2743 :                                     else
(1)  141/2743 :                                     include "fpanel.inc"
(1)  142/2743 : [138]                               endif
(1)  143/2743 :                         SINIT:      equ SINIT8251
(1)  144/2743 :                                     ifndef nocinp
(1)  145/2743 :                         CINP:       equ CINP8251
(1)  146/2743 : [144]                               endif
(1)  147/2743 :                                     ifndef nocinpne
(1)  148/2743 :                         CINPNE:     equ FCINP8251
(1)  149/2743 : [147]                               endif
(1)  150/2743 :                         CPRINT:     equ CPRINT8251
(1)  151/2743 :                         CRDY:       equ CRDY8251
(1)  152/2743 : [134]                               endif
(1)  153/2743 :                         
    1267/2743 :                                     include "stack.inc"
(1)    1/2743 : =>UNDEFINED                          ifndef   incstack    ; avoid multiple inclusion
(1)    2/2743 : =1H                     incstack     equ      1
(1)    3/2743 :                         
(1)    4/2743 :                         ;-----------------------------------------------------------------------------------------       
(1)    5/2743 :                         ; I/O routines for Console UART in Heathkit H8
(1)    6/2743 :                         ;
(1)    7/2743 :                         ; Scott Baker, https://www.smbaker.com
(1)    8/2743 :                         ;-----------------------------------------------------------------------------------------
(1)    9/2743 :                         
(1)   10/2743 : =18H                    h8_stack: equ 18H
(1)   11/2743 : =19H                    h8_sprel: equ 19H
(1)   12/2743 : =1AH                    h8_spreh: equ 1AH
(1)   13/2743 :                         
(1)   14/2743 : =17H                    stack_push: equ h8_out7
(1)   15/2743 : =7H                     stack_pop:  equ h8_in7
(1)   16/2743 :                         
(1)   17/2743 :                         ;-----------------------------------------------------------------------------------------       
(1)   18/2743 :                         ; INITTAPE: initialize tape
(1)   19/2743 :                         ;-----------------------------------------------------------------------------------------
(1)   20/2743 :                         
(1)   21/2743 : =>DEFINED               STACKINIT:  ifndef noiomap
(1)   22/2743 :                                     mvi a,h8_stack          ; configure IO mapper
(1)   23/2743 :                                     out mm_io7
(1)   24/2743 : [21]                                endif
(1)   25/2743 : 07                                  ret
(1)   26/2744 :                         
(1)   27/2744 : [1]                                 endif                ; incstack
    1268/2744 :                         
    1269/2744 :                         ;------------------------------------------------------------------------        
    1270/2744 :                         ; For MasterBlaster, include the master menu
    1271/2744 :                         ;------------------------------------------------------------------------
    1272/2744 :                         
    1273/2744 : =>DEFINED                           ifdef master
    1274/2744 :                                     include "master.inc"
(1)    1/2744 :                         ; ----------------------------------------------------------------------------
(1)    2/2744 :                         ; MasterBlaster
(1)    3/2744 :                         ; https://www.smbaker.com/
(1)    4/2744 :                         ; ----------------------------------------------------------------------------
(1)    5/2744 :                         
(1)    6/2744 : =1H                     MAS_STAT_PORT: equ 01H
(1)    7/2744 :                         
(1)    8/2744 : =14H                    MAS_TAKE_PORT: equ 14H
(1)    9/2744 : =15H                    MAS_INT_PORT:  equ 15H
(1)   10/2744 : =16H                    MAS_REQ_PORT:  equ 16H
(1)   11/2744 : =17H                    MAS_RST_PORT:  equ 17H
(1)   12/2744 :                         
(1)   13/2744 : =0H                     MAS_CMD_ID     equ 000H
(1)   14/2744 : =1H                     MAS_CMD_FREERUN equ 001H
(1)   15/2744 : =2H                     MAS_CMD_SINGLE equ 002H
(1)   16/2744 : =3H                     MAS_CMD_LIFE   equ 003H
(1)   17/2744 : =4H                     MAS_CMD_BANNER equ 004H
(1)   18/2744 :                         
(1)   19/2744 :                         ; ----------------------------------------------------------------------------
(1)   20/2744 :                         ; mas_init - process the dipswitch and autostart as necessary
(1)   21/2744 :                         ;            jump back to mas_init_return if no autostart
(1)   22/2744 :                         ; ----------------------------------------------------------------------------
(1)   23/2744 :                         
(1)   24/2744 : 41                      mas_init:   in DIPPORT
(1)   25/2745 : 24 F0                               ani 0F0H
(1)   26/2747 : 3C 70                               cpi 070H                         ; off off off on -> autostart id
(1)   27/2749 : 68 59 27                            jz mas_auto_id
(1)   28/274C : 3C B0                               cpi 0B0H                         ; off off on off  -> autostart freerun
(1)   29/274E : 68 71 27                            jz mas_auto_freerun
(1)   30/2751 : 3C 30                               cpi 030H
(1)   31/2753 : 68 89 27                            jz mas_auto_conway               ; off off on on   -> autostart conway
(1)   32/2756 : 44 8E 20                            jmp mas_init_return              ; no autostart - go back to main menu
(1)   33/2759 :                         mas_auto_id:
(1)   34/2759 : 2E 2F                               mvi h,hi(mas_auto_id_txt)
(1)   35/275B : 36 2C                               mvi l,lo(mas_auto_id_txt)
(1)   36/275D : 46 D6 26                            call puts
(1)   37/2760 : 46 31 2A                            call mas_copy_rom
(1)   38/2763 : 46 6D 2A                            call mas_set_id
(1)   39/2766 : 06 00                               mvi a, MAS_CMD_ID
(1)   40/2768 : 46 8B 2A                            call mas_set_cmd
(1)   41/276B : 46 42 28                            call mas_reset
(1)   42/276E : 44 AB 27                            jmp mas_prompt
(1)   43/2771 :                         mas_auto_freerun:
(1)   44/2771 : 2E 2F                               mvi h,hi(mas_auto_free_txt)
(1)   45/2773 : 36 3B                               mvi l,lo(mas_auto_free_txt)
(1)   46/2775 : 46 D6 26                            call puts
(1)   47/2778 : 46 31 2A                            call mas_copy_rom
(1)   48/277B : 46 6D 2A                            call mas_set_id
(1)   49/277E : 06 01                               mvi a, MAS_CMD_FREERUN
(1)   50/2780 : 46 8B 2A                            call mas_set_cmd
(1)   51/2783 : 46 42 28                            call mas_reset
(1)   52/2786 : 44 AB 27                            jmp mas_prompt
(1)   53/2789 :                         mas_auto_conway:
(1)   54/2789 : 2E 2F                               mvi h,hi(mas_auto_conway_txt)
(1)   55/278B : 36 4F                               mvi l,lo(mas_auto_conway_txt)
(1)   56/278D : 46 D6 26                            call puts
(1)   57/2790 : 46 31 2A                            call mas_copy_rom
(1)   58/2793 : 46 6D 2A                            call mas_set_id
(1)   59/2796 : 06 03                               mvi a, MAS_CMD_LIFE
(1)   60/2798 : 46 8B 2A                            call mas_set_cmd
(1)   61/279B : 46 42 28                            call mas_reset
(1)   62/279E : 46 42 29                            call mas_conway_reset_super
(1)   63/27A1 : 44 75 29                            jmp mas_conway_run_super
(1)   64/27A4 :                         
(1)   65/27A4 :                         ; ----------------------------------------------------------------------------
(1)   66/27A4 :                         ; mas_menu - display master's menu
(1)   67/27A4 :                         ; ----------------------------------------------------------------------------
(1)   68/27A4 :                         
(1)   69/27A4 : 2E 2D                   mas_menu:   mvi h,hi(mas_menutxt)           ; display the menu
(1)   70/27A6 : 36 26                               mvi l,lo(mas_menutxt) 
(1)   71/27A8 : 46 D6 26                            call puts
(1)   72/27AB :                                     ; fall through to mas_prompt
(1)   73/27AB :                         
(1)   74/27AB :                         ; ----------------------------------------------------------------------------
(1)   75/27AB :                         ; mas_prompt - display master's prompt
(1)   76/27AB :                         ; ----------------------------------------------------------------------------
(1)   77/27AB :                                     
(1)   78/27AB : 2E 2E                   mas_prompt: mvi h,hi(mas_prompttxt)         ; prompt for input
(1)   79/27AD : 36 3E                               mvi l,lo(mas_prompttxt) 
(1)   80/27AF : 46 D6 26                            call puts
(1)   81/27B2 :                         mas_prompt0:
(1)   82/27B2 : 46 ED 2F                            call getch                  ; get input command from user
(1)   83/27B5 :                          
(1)   84/27B5 :                         mas_prompt1:
(1)   85/27B5 : 3C 3F                               cpi '?'                     ; is the input '?'
(1)   86/27B7 : 48 BD 27                            jnz mas_prompt2             ; nope 
(1)   87/27BA : 44 A4 27                            jmp mas_menu                ; nope, display the menu
(1)   88/27BD :                         
(1)   89/27BD :                         mas_prompt2:
(1)   90/27BD : 3C 61                               cpi 'a'                     ; is the input character below 'a'?
(1)   91/27BF : 60 C4 27                            jc $+5                      ; skip the next instruction if the character is already upper case
(1)   92/27C2 : 14 20                               sui 20H                     ; else, convert to the character to upper case
(1)   93/27C4 : 46 DC 2F                            call putch                  ; echo the character
(1)   94/27C7 :                         
(1)   95/27C7 : 3C 43                               cpi 'C'
(1)   96/27C9 : 68 39 29                            jz mas_conway_super
(1)   97/27CC :                         
(1)   98/27CC : 3C 44                               cpi 'D'
(1)   99/27CE : 68 58 29                            jz mas_conway_update_super
(1)  100/27D1 :                         
(1)  101/27D1 : 3C 45                               cpi 'E'
(1)  102/27D3 : 68 75 29                            jz mas_conway_run_super
(1)  103/27D6 :                         
(1)  104/27D6 : 3C 58                               cpi 'X'
(1)  105/27D8 : 68 0C 29                            jz mas_conway
(1)  106/27DB :                         
(1)  107/27DB : 3C 59                               cpi 'Y'
(1)  108/27DD : 68 1B 29                            jz mas_conway_update
(1)  109/27E0 :                         
(1)  110/27E0 : 3C 5A                               cpi 'Z'
(1)  111/27E2 : 68 27 29                            jz mas_conway_run
(1)  112/27E5 :                         
(1)  113/27E5 : 3C 49                               cpi 'I'
(1)  114/27E7 : 68 4E 28                            jz mas_interrupt_cmd
(1)  115/27EA :                         
(1)  116/27EA : 3C 4A                               cpi 'J'
(1)  117/27EC : 68 5B 28                            jz mas_interrupt_cmd2
(1)  118/27EF :                         
(1)  119/27EF : 3C 4C                               cpi 'L'
(1)  120/27F1 : 68 7F 28                            jz mas_load_program_cmd
(1)  121/27F4 :                         
(1)  122/27F4 : 3C 50                               cpi 'P'
(1)  123/27F6 : 68 8F 28                            jz mas_set_program_cmd
(1)  124/27F9 :                         
(1)  125/27F9 : 3C 52                               cpi 'R'
(1)  126/27FB : 68 35 28                            jz mas_reset_cmd
(1)  127/27FE :                         
(1)  128/27FE : 3C 53                               cpi 'S'
(1)  129/2800 : 68 24 28                            jz mas_status_cmd               ; print status
(1)  130/2803 :                         
(1)  131/2803 : 3C 54                               cpi 'T'
(1)  132/2805 : 68 AC 28                            jz mas_take_cmd
(1)  133/2808 :                         
(1)  134/2808 : 3C 55                               cpi 'U'
(1)  135/280A : 68 FC 28                            jz mas_untake_cmd
(1)  136/280D :                         
(1)  137/280D : 3C 57                               cpi 'W'
(1)  138/280F : 68 DC 28                            jz mas_takew_cmd
(1)  139/2812 :                         
(1)  140/2812 : 3C 51                               cpi 'Q'
(1)  141/2814 : 68 8E 20                            jz menu                     ; back to main menu
(1)  142/2817 :                         
(1)  143/2817 : 3C 0D                               cpi 0DH
(1)  144/2819 : 68 A4 27                            jz mas_menu                 ; display the menu
(1)  145/281C : 06 3F                               mvi a,'?'
(1)  146/281E : 46 DC 2F                            call putch                  ; whaaat??
(1)  147/2821 : 44 AB 27                            jmp mas_prompt
(1)  148/2824 :                         
(1)  149/2824 :                         ; ----------------------------------------------------------------------------
(1)  150/2824 :                         ; mas_status_cmd - show status byte
(1)  151/2824 :                         ; ----------------------------------------------------------------------------
(1)  152/2824 :                         
(1)  153/2824 :                         mas_status_cmd:
(1)  154/2824 : 2E 2E                              mvi h,hi(mas_statustxt)
(1)  155/2826 : 36 43                              mvi l,lo(mas_statustxt)
(1)  156/2828 : 46 D6 26                           call puts
(1)  157/282B : 43                                 in MAS_STAT_PORT
(1)  158/282C : 46 0A 2D                           call prn_bin
(1)  159/282F : 46 C7 26                           call crlf
(1)  160/2832 : 44 AB 27                           jmp mas_prompt
(1)  161/2835 :                         
(1)  162/2835 :                         ; ----------------------------------------------------------------------------
(1)  163/2835 :                         ; mas_reset_cmd - reset all blasters
(1)  164/2835 :                         ; ----------------------------------------------------------------------------
(1)  165/2835 :                         
(1)  166/2835 :                         mas_reset_cmd:
(1)  167/2835 : 2E 2E                              mvi h,hi(mas_resettxt)
(1)  168/2837 : 36 4A                              mvi l,lo(mas_resettxt)
(1)  169/2839 : 46 D6 26                           call puts
(1)  170/283C :                         mas_reset_inner:
(1)  171/283C : 46 42 28                           call mas_reset
(1)  172/283F : 44 AB 27                           jmp mas_prompt
(1)  173/2842 :                         
(1)  174/2842 :                         mas_reset:
(1)  175/2842 : 06 00                              mvi a, 000H
(1)  176/2844 : 69                                 out MAS_TAKE_PORT            ; if it's running, this will make it halt
(1)  177/2845 : 06 FF                              mvi a, 0FFH
(1)  178/2847 : 6D                                 out MAS_REQ_PORT             ; realease any REQs
(1)  179/2848 : 6B                                 out MAS_INT_PORT             ; set all interrupts inactive 
(1)  180/2849 : 69                                 out MAS_TAKE_PORT            ; release any TAKEs
(1)  181/284A : 06 00                              mvi a, 00H         
(1)  182/284C : 6F                                 out MAS_RST_PORT             ; toggle the reset
(1)  183/284D : 07                                 ret
(1)  184/284E :                         
(1)  185/284E :                         ; ----------------------------------------------------------------------------
(1)  186/284E :                         ; mas_interrupt_cmd - send interrupt
(1)  187/284E :                         ; ----------------------------------------------------------------------------
(1)  188/284E :                         
(1)  189/284E :                         mas_interrupt_cmd:
(1)  190/284E : 2E 2E                              mvi h,hi(mas_inttxt)
(1)  191/2850 : 36 51                              mvi l,lo(mas_inttxt)
(1)  192/2852 : 46 D6 26                           call puts
(1)  193/2855 : 06 00                              mvi a, 000H
(1)  194/2857 : 6B                                 out MAS_INT_PORT     
(1)  195/2858 :                         
(1)  196/2858 : 44 AB 27                           jmp mas_prompt
(1)  197/285B :                         
(1)  198/285B :                         ; ----------------------------------------------------------------------------
(1)  199/285B :                         ; mas_interrupt_cmd2 - this was one of my test cases for testing interrupts
(1)  200/285B :                         ; ----------------------------------------------------------------------------
(1)  201/285B :                         
(1)  202/285B :                         mas_interrupt_cmd2:
(1)  203/285B : 2E 2E                              mvi h,hi(mas_inttxt)
(1)  204/285D : 36 51                              mvi l,lo(mas_inttxt)
(1)  205/285F : 46 D6 26                           call puts
(1)  206/2862 :                         mas_interrupt_cmd2l:
(1)  207/2862 : 43                                 in MAS_STAT_PORT
(1)  208/2863 : 24 40                              ani 040H
(1)  209/2865 : 3C 40                              cpi 040H
(1)  210/2867 : 48 62 28                           jnz mas_interrupt_cmd2l
(1)  211/286A :                         
(1)  212/286A : 06 00                              mvi a, 000H
(1)  213/286C : 6B                                 out MAS_INT_PORT
(1)  214/286D :                         
(1)  215/286D : C0                                 nop
(1)  216/286E : C0                                 nop
(1)  217/286F :                         
(1)  218/286F : 43                                 in MAS_STAT_PORT
(1)  219/2870 : 24 40                              ani 040H
(1)  220/2872 : 68 62 28                           jz mas_interrupt_cmd2l
(1)  221/2875 : 2E 2F                              mvi h,hi(mas_stucktxt)
(1)  222/2877 : 36 24                              mvi l,lo(mas_stucktxt)
(1)  223/2879 : 46 D6 26                           call puts
(1)  224/287C : 44 AB 27                           jmp mas_prompt
(1)  225/287F :                         
(1)  226/287F :                         ; ----------------------------------------------------------------------------
(1)  227/287F :                         ; mas_load_program_cmd - load a program
(1)  228/287F :                         ; ----------------------------------------------------------------------------
(1)  229/287F :                         
(1)  230/287F :                         mas_load_program_cmd:
(1)  231/287F : 2E 2E                              mvi h,hi(mas_loadtxt)
(1)  232/2881 : 36 71                              mvi l,lo(mas_loadtxt)
(1)  233/2883 : 46 D6 26                           call puts
(1)  234/2886 : 46 31 2A                           call mas_copy_rom
(1)  235/2889 : 46 6D 2A                           call mas_set_id
(1)  236/288C : 44 96 28                           jmp mas_set_program_inner                    ; Now go set the program
(1)  237/288F :                         
(1)  238/288F :                         ; ----------------------------------------------------------------------------
(1)  239/288F :                         ; mas_set_program_cmd - set program number
(1)  240/288F :                         ; ----------------------------------------------------------------------------
(1)  241/288F :                         
(1)  242/288F :                         mas_set_program_cmd:
(1)  243/288F : 2E 2E                              mvi h,hi(mas_setpgmtxt)
(1)  244/2891 : 36 77                              mvi l,lo(mas_setpgmtxt)
(1)  245/2893 : 46 D6 26                           call puts
(1)  246/2896 :                         mas_set_program_inner:
(1)  247/2896 : 2E 2E                              mvi h,hi(mas_pgmtxt)
(1)  248/2898 : 36 84                              mvi l,lo(mas_pgmtxt)
(1)  249/289A : 46 D6 26                           call puts
(1)  250/289D : 46 42 26                           call get_one
(1)  251/28A0 : 60 A6 28                           jc mas_set_program_exit
(1)  252/28A3 : 46 8B 2A                           call mas_set_cmd
(1)  253/28A6 :                         mas_set_program_exit:
(1)  254/28A6 : 46 C7 26                           call crlf
(1)  255/28A9 : 44 3C 28                           jmp mas_reset_inner                          ; Now reset it
(1)  256/28AC :                         
(1)  257/28AC :                         ; ----------------------------------------------------------------------------
(1)  258/28AC :                         ; mas_take_cmd - take control of blaster
(1)  259/28AC :                         ; ----------------------------------------------------------------------------
(1)  260/28AC :                         
(1)  261/28AC :                         mas_take_cmd:
(1)  262/28AC : 2E 2E                              mvi h,hi(mas_taketxt)
(1)  263/28AE : 36 E5                              mvi l,lo(mas_taketxt)
(1)  264/28B0 : 46 D6 26                           call puts
(1)  265/28B3 : 46 42 26                           call get_one
(1)  266/28B6 : 60 D6 28                           jc mas_take_exit
(1)  267/28B9 : D0                                 mov c,a
(1)  268/28BA :                         
(1)  269/28BA : 2E 2E                              mvi h,hi(mas_takebanktxt)
(1)  270/28BC : 36 FD                              mvi l,lo(mas_takebanktxt)
(1)  271/28BE : 46 D6 26                           call puts
(1)  272/28C1 : 46 42 26                           call get_one
(1)  273/28C4 : 60 D6 28                           jc mas_take_exit
(1)  274/28C7 :                         
(1)  275/28C7 : 04 08                              adi EXTRAM0
(1)  276/28C9 : 59                                 out MMAP0
(1)  277/28CA :                         
(1)  278/28CA : 10                                 inr c
(1)  279/28CB : 06 FE                              mvi a,0FEH
(1)  280/28CD :                         mas_take0:
(1)  281/28CD : 11                                 dcr c
(1)  282/28CE : 68 D5 28                           jz mas_take1
(1)  283/28D1 : 02                                 rlc
(1)  284/28D2 : 44 CD 28                           jmp mas_take0
(1)  285/28D5 :                         mas_take1:
(1)  286/28D5 : 69                                 out MAS_TAKE_PORT
(1)  287/28D6 :                         mas_take_exit:
(1)  288/28D6 : 46 C7 26                           call crlf
(1)  289/28D9 : 44 AB 27                           jmp mas_prompt
(1)  290/28DC :                         
(1)  291/28DC :                         ; ----------------------------------------------------------------------------
(1)  292/28DC :                         ; mas_takew_cmd - take control of blaster for write only
(1)  293/28DC :                         ; ----------------------------------------------------------------------------
(1)  294/28DC :                         
(1)  295/28DC :                         mas_takew_cmd:
(1)  296/28DC : 2E 2E                              mvi h,hi(mas_taketxt)
(1)  297/28DE : 36 E5                              mvi l,lo(mas_taketxt)
(1)  298/28E0 : 46 D6 26                           call puts
(1)  299/28E3 : 2E 2E                              mvi h,hi(mas_takebanktxt)
(1)  300/28E5 : 36 FD                              mvi l,lo(mas_takebanktxt)
(1)  301/28E7 : 46 D6 26                           call puts
(1)  302/28EA : 46 42 26                           call get_one
(1)  303/28ED : 60 F6 28                           jc mas_takew_exit
(1)  304/28F0 : 04 08                              adi EXTRAM0
(1)  305/28F2 : 59                                 out MMAP0
(1)  306/28F3 : 06 7F                              mvi a,07FH
(1)  307/28F5 : 69                                 out MAS_TAKE_PORT
(1)  308/28F6 :                         mas_takew_exit:
(1)  309/28F6 : 46 C7 26                           call crlf
(1)  310/28F9 : 44 AB 27                           jmp mas_prompt
(1)  311/28FC :                         
(1)  312/28FC :                         ; ----------------------------------------------------------------------------
(1)  313/28FC :                         ; mas_untake_cmd - go back to main ram
(1)  314/28FC :                         ; ----------------------------------------------------------------------------
(1)  315/28FC :                         
(1)  316/28FC :                         mas_untake_cmd:
(1)  317/28FC : 2E 2F                              mvi h,hi(mas_untaketxt)
(1)  318/28FE : 36 1C                              mvi l,lo(mas_untaketxt)
(1)  319/2900 : 46 D6 26                           call puts
(1)  320/2903 : 06 0C                              mvi a,RAM0
(1)  321/2905 : 59                                 out MMAP0
(1)  322/2906 : 06 FF                              mvi a,0FFH
(1)  323/2908 : 69                                 out MAS_TAKE_PORT
(1)  324/2909 : 44 AB 27                           jmp mas_prompt
(1)  325/290C :                         
(1)  326/290C :                         ; ----------------------------------------------------------------------------
(1)  327/290C :                         ; mas_conway - setup conway, master only
(1)  328/290C :                         ; ----------------------------------------------------------------------------
(1)  329/290C :                         
(1)  330/290C :                         mas_conway:
(1)  331/290C : 46 C7 26                           call crlf
(1)  332/290F : 46 E5 29                           call mas_conway_init_iter
(1)  333/2912 : 46 3B 2B                           call conway_reset
(1)  334/2915 : 46 63 2B                           call conway_copy
(1)  335/2918 : 44 AB 27                           jmp mas_prompt
(1)  336/291B :                         
(1)  337/291B :                         ; ----------------------------------------------------------------------------
(1)  338/291B :                         ; mas_conway_update - do one update and print cycle, master only
(1)  339/291B :                         ; ----------------------------------------------------------------------------
(1)  340/291B :                         
(1)  341/291B :                         mas_conway_update:
(1)  342/291B : 46 C7 26                           call crlf
(1)  343/291E : 46 24 2C                           call conway_full
(1)  344/2921 : 46 63 2B                           call conway_copy
(1)  345/2924 : 44 AB 27                           jmp mas_prompt
(1)  346/2927 :                         
(1)  347/2927 :                         ; ----------------------------------------------------------------------------
(1)  348/2927 :                         ; mas_conway_run - continuous conway run, master only
(1)  349/2927 :                         ; ----------------------------------------------------------------------------
(1)  350/2927 :                         
(1)  351/2927 :                         mas_conway_run:
(1)  352/2927 : 46 8D 29                           call cls
(1)  353/292A :                         mas_conway_run_loop:
(1)  354/292A : 46 24 2C                           call conway_full
(1)  355/292D : 46 A2 29                           call home
(1)  356/2930 : 46 63 2B                           call conway_copy
(1)  357/2933 : 46 EC 29                           call mas_conway_show_iter
(1)  358/2936 : 44 2A 29                           jmp mas_conway_run_loop
(1)  359/2939 :                         
(1)  360/2939 :                         ; ----------------------------------------------------------------------------
(1)  361/2939 :                         ; mas_conway_super - setup conway
(1)  362/2939 :                         ; ----------------------------------------------------------------------------
(1)  363/2939 :                         
(1)  364/2939 :                         mas_conway_super:
(1)  365/2939 : 46 C7 26                           call crlf
(1)  366/293C : 46 42 29                           call mas_conway_reset_super
(1)  367/293F : 44 AB 27                           jmp mas_prompt
(1)  368/2942 :                         
(1)  369/2942 :                         mas_conway_reset_super:
(1)  370/2942 : 46 E5 29                           call mas_conway_init_iter
(1)  371/2945 : 06 09                              mvi a,EXTRAM1
(1)  372/2947 : 5B                                 out MMAP1
(1)  373/2948 : 06 80                              mvi a,080H                           ; take everyone
(1)  374/294A : 69                                 out MAS_TAKE_PORT
(1)  375/294B : 46 3B 2B                           call conway_reset
(1)  376/294E : 06 FF                              mvi a,0FFH                           ; take nobody
(1)  377/2950 : 69                                 out MAS_TAKE_PORT
(1)  378/2951 : 06 0D                              mvi a,RAM1
(1)  379/2953 : 5B                                 out MMAP1
(1)  380/2954 : 46 FF 29                           call mas_conway_copy
(1)  381/2957 : 07                                 ret
(1)  382/2958 :                         
(1)  383/2958 :                         ; ----------------------------------------------------------------------------
(1)  384/2958 :                         ; mas_conway_update_super - do one update and print cycle
(1)  385/2958 :                         ; ----------------------------------------------------------------------------
(1)  386/2958 :                         
(1)  387/2958 :                         mas_conway_update_super:
(1)  388/2958 : 46 C7 26                           call crlf
(1)  389/295B : 46 71 29                           call mas_conway_trigger
(1)  390/295E : 46 DB 2B                           call conway_print
(1)  391/2961 : 46 6A 29                           call mas_conway_wait
(1)  392/2964 : 46 FF 29                           call mas_conway_copy
(1)  393/2967 : 44 AB 27                           jmp mas_prompt
(1)  394/296A :                         
(1)  395/296A :                         mas_conway_wait:
(1)  396/296A : 43                                 in MAS_STAT_PORT
(1)  397/296B : 24 01                              ani 01H                              ; just wait on the first one.
(1)  398/296D : 68 6A 29                           jz mas_conway_wait                   ; all the others will be similar.
(1)  399/2970 : 07                                 ret
(1)  400/2971 :                         
(1)  401/2971 :                         mas_conway_trigger:
(1)  402/2971 : 06 00                              mvi a,000H
(1)  403/2973 : 6B                                 out MAS_INT_PORT
(1)  404/2974 : 07                                 ret
(1)  405/2975 :                         
(1)  406/2975 :                         ; ----------------------------------------------------------------------------
(1)  407/2975 :                         ; mas_conway_run_super - continuous conway run
(1)  408/2975 :                         ; ----------------------------------------------------------------------------
(1)  409/2975 :                         
(1)  410/2975 :                         mas_conway_run_super:
(1)  411/2975 : 46 8D 29                           call cls
(1)  412/2978 :                         mas_conway_run_super_loop:
(1)  413/2978 : 46 71 29                           call mas_conway_trigger
(1)  414/297B : 46 A2 29                           call home
(1)  415/297E : 46 DB 2B                           call conway_print
(1)  416/2981 : 46 EC 29                           call mas_conway_show_iter
(1)  417/2984 : 46 6A 29                           call mas_conway_wait
(1)  418/2987 : 46 FF 29                           call mas_conway_copy
(1)  419/298A : 44 78 29                           jmp mas_conway_run_super_loop
(1)  420/298D :                         
(1)  421/298D : 06 1B                   cls:       mvi a, 01BH          ; ESC [2J
(1)  422/298F : 46 FE 26                           call CPRINT
(1)  423/2992 : 06 5B                              mvi a, '['
(1)  424/2994 : 46 FE 26                           call CPRINT
(1)  425/2997 : 06 32                              mvi a, '2'
(1)  426/2999 : 46 FE 26                           call CPRINT
(1)  427/299C : 06 4A                              mvi a,'J'
(1)  428/299E : 46 FE 26                           call CPRINT
(1)  429/29A1 : 07                                 ret
(1)  430/29A2 :                         
(1)  431/29A2 : 06 1B                   home:      mvi a, 01BH          ; ESC [1;1H
(1)  432/29A4 : 46 FE 26                           call CPRINT
(1)  433/29A7 : 06 5B                              mvi a,'['
(1)  434/29A9 : 46 FE 26                           call CPRINT
(1)  435/29AC : 06 31                              mvi a,'1'
(1)  436/29AE : 46 FE 26                           call CPRINT
(1)  437/29B1 : 06 3B                              mvi a,';'
(1)  438/29B3 : 46 FE 26                           call CPRINT
(1)  439/29B6 : 06 31                              mvi a,'1'
(1)  440/29B8 : 46 FE 26                           call CPRINT
(1)  441/29BB : 06 48                              mvi a,'H'
(1)  442/29BD : 46 FE 26                           call CPRINT
(1)  443/29C0 : 07                                 ret
(1)  444/29C1 :                         
(1)  445/29C1 : 06 1B                   side:      mvi a, 01BH          ; ESC [1;70H
(1)  446/29C3 : 46 FE 26                           call CPRINT
(1)  447/29C6 : 06 5B                              mvi a,'['
(1)  448/29C8 : 46 FE 26                           call CPRINT
(1)  449/29CB : 06 31                              mvi a,'1'
(1)  450/29CD : 46 FE 26                           call CPRINT
(1)  451/29D0 : 06 3B                              mvi a,';'
(1)  452/29D2 : 46 FE 26                           call CPRINT
(1)  453/29D5 : 06 37                              mvi a,'7'
(1)  454/29D7 : 46 FE 26                           call CPRINT
(1)  455/29DA : 06 30                              mvi a,'0'
(1)  456/29DC : 46 FE 26                           call CPRINT
(1)  457/29DF : 06 48                              mvi a,'H'
(1)  458/29E1 : 46 FE 26                           call CPRINT
(1)  459/29E4 : 07                                 ret
(1)  460/29E5 :                         
(1)  461/29E5 :                         mas_conway_init_iter:
(1)  462/29E5 : 2E 00                              mvi h,0
(1)  463/29E7 : 36 00                              mvi l,0
(1)  464/29E9 : 44 7E 24                           jmp save_hl
(1)  465/29EC :                         
(1)  466/29EC :                         mas_conway_show_iter:
(1)  467/29EC : 46 C1 29                           call side                            ; move to where we want to print the iter count
(1)  468/29EF : 46 88 24                           call restore_hl                      ; get the counter
(1)  469/29F2 : 30                                 inr l                                ; increment it
(1)  470/29F3 : 48 F7 29                           jnz mas_conway_show_iter_nowrap
(1)  471/29F6 : 28                                 inr h
(1)  472/29F7 :                         mas_conway_show_iter_nowrap:
(1)  473/29F7 : 46 7E 24                           call save_hl                         ; save the counter
(1)  474/29FA : EB                                 mov h,d                              ; DE to HL
(1)  475/29FB : F4                                 mov l,e
(1)  476/29FC : 44 2D 25                           jmp prndec16                         ; print the counter
(1)  477/29FF :                         
(1)  478/29FF :                         ; --------------------------------------------
(1)  479/29FF :                         ; mas_conway_copy
(1)  480/29FF :                         ;   copy new to old
(1)  481/29FF :                         ; --------------------------------------------
(1)  482/29FF :                         
(1)  483/29FF :                         mas_conway_copy:
(1)  484/29FF : 2E 18                              mvi h, (PAGE1  | 008H)               ; beginning of conway_new
(1)  485/2A01 : 36 00                              mvi l, 0
(1)  486/2A03 : 06 09                              mvi a,EXTRAM1
(1)  487/2A05 : 5B                                 out MMAP1
(1)  488/2A06 : 06 7E                              mvi a,07EH                           ; take D7,D0 low -- read from 0 write to all
(1)  489/2A08 : 69                                 out MAS_TAKE_PORT
(1)  490/2A09 : 46 CB 2B                           call conway_fcopy_block
(1)  491/2A0C : 06 7D                              mvi a,07DH                           ; take D7,D1 low -- read from 1 write to all
(1)  492/2A0E : 69                                 out MAS_TAKE_PORT
(1)  493/2A0F : 46 CB 2B                           call conway_fcopy_block
(1)  494/2A12 : 06 7B                              mvi a,07BH                           ; take D7,D2 low -- read from 2 write to all
(1)  495/2A14 : 69                                 out MAS_TAKE_PORT
(1)  496/2A15 : 46 CB 2B                           call conway_fcopy_block
(1)  497/2A18 : 06 77                              mvi a,077H                           ; take D7,D3 low -- read from 3 write to all
(1)  498/2A1A : 69                                 out MAS_TAKE_PORT
(1)  499/2A1B : 46 CB 2B                           call conway_fcopy_block
(1)  500/2A1E : 06 6F                              mvi a,06FH                           ; take D7,D4 low -- read from 4 write to all
(1)  501/2A20 : 69                                 out MAS_TAKE_PORT
(1)  502/2A21 : 46 CB 2B                           call conway_fcopy_block
(1)  503/2A24 : 06 5F                              mvi a,05FH                           ; take D7,D5 low -- read from 5 write to all
(1)  504/2A26 : 69                                 out MAS_TAKE_PORT
(1)  505/2A27 : 46 CB 2B                           call conway_fcopy_block
(1)  506/2A2A :                         
(1)  507/2A2A : 06 FF                              mvi a,0FFH                           ; take nobody
(1)  508/2A2C : 69                                 out MAS_TAKE_PORT
(1)  509/2A2D : 06 0D                              mvi a,RAM1
(1)  510/2A2F : 5B                                 out MMAP1
(1)  511/2A30 : 07                                 ret
(1)  512/2A31 :                         
(1)  513/2A31 :                         ; --------------------------------------------
(1)  514/2A31 :                         ; mas_copy_rom
(1)  515/2A31 :                         ;   copy rom to ram on blaster
(1)  516/2A31 :                         ; --------------------------------------------
(1)  517/2A31 :                         
(1)  518/2A31 :                         mas_copy_rom:
(1)  519/2A31 : 06 80                              mvi a,080H                           ; TAKE D0-D6 Low -- take all cpus ;; 07FH                           ; TAKE d7 low
(1)  520/2A33 : 69                                 out MAS_TAKE_PORT
(1)  521/2A34 :                         
(1)  522/2A34 : 06 0A                              mvi a,EXTRAM2                        ; PAGE2 to EXTRAM2
(1)  523/2A36 : 59                                 out MMAP0
(1)  524/2A37 :                         
(1)  525/2A37 : 06 0B                              mvi a,EXTRAM3                        ; PAGE3 to EXTRAM3
(1)  526/2A39 : 5B                                 out MMAP1
(1)  527/2A3A :                         
(1)  528/2A3A : 1E 20                              mvi d,PAGE2                          ; copy from PAGE2 to PAGE0
(1)  529/2A3C : 26 00                              mvi e,PAGE0
(1)  530/2A3E :                         mas_copy1:
(1)  531/2A3E : 36 00                              mvi l,0
(1)  532/2A40 :                         mas_copy2:
(1)  533/2A40 : EB                                 mov h,d
(1)  534/2A41 : C7                                 mov a,m
(1)  535/2A42 : EC                                 mov h,e
(1)  536/2A43 : F8                                 mov m,a
(1)  537/2A44 : 30                                 inr l
(1)  538/2A45 : 48 40 2A                           jnz mas_copy2
(1)  539/2A48 : 18                                 inr d
(1)  540/2A49 : 20                                 inr e
(1)  541/2A4A : C4                                 mov a,e
(1)  542/2A4B : 3C 20                              cpi 20H                              ; at 2000H we are done
(1)  543/2A4D : 48 3E 2A                           jnz mas_copy1
(1)  544/2A50 :                         
(1)  545/2A50 : 06 08                              mvi a,EXTRAM0
(1)  546/2A52 : 59                                 out MMAP0
(1)  547/2A53 : 2E 00                              mvi h,0
(1)  548/2A55 : 36 00                              mvi l,0
(1)  549/2A57 : 3E 0D                              mvi m, 00DH                          ; RST 01
(1)  550/2A59 : 36 08                              mvi l,8
(1)  551/2A5B : 3E 44                              mvi m, 044H                          ; JMP
(1)  552/2A5D : 30                                 inr l
(1)  553/2A5E : 3E AA                              mvi m, lo(mas_exec)
(1)  554/2A60 : 30                                 inr l
(1)  555/2A61 : 3E 2A                              mvi m, hi(mas_exec)
(1)  556/2A63 :                         
(1)  557/2A63 : 06 0C                              mvi a,RAM0                           ; restore PAGE2/PAGE3 to RAM
(1)  558/2A65 : 59                                 out MMAP0
(1)  559/2A66 :                         
(1)  560/2A66 : 06 0D                              mvi a,RAM1
(1)  561/2A68 : 5B                                 out MMAP1
(1)  562/2A69 :                         
(1)  563/2A69 : 06 FF                              mvi a, 0FFH
(1)  564/2A6B : 69                                 out MAS_TAKE_PORT                    ; TAKE all high
(1)  565/2A6C : 07                                 ret
(1)  566/2A6D :                         
(1)  567/2A6D :                         ; --------------------------------------------
(1)  568/2A6D :                         ; mas_set_id
(1)  569/2A6D :                         ;   set board ids on blaster
(1)  570/2A6D :                         ; --------------------------------------------
(1)  571/2A6D :                         
(1)  572/2A6D :                         mas_set_id:
(1)  573/2A6D : 06 0A                              mvi a,EXTRAM2
(1)  574/2A6F : 59                                 out MMAP0
(1)  575/2A70 :                         
(1)  576/2A70 : 2E 00                              mvi h,PAGE0
(1)  577/2A72 : 36 69                              mvi l,lo(mas_board)
(1)  578/2A74 :                         
(1)  579/2A74 : 1E 00                              mvi d,0                              ; d is blaster index
(1)  580/2A76 : 26 FE                              mvi e,0FEH                           ; start with d0 low, all else high
(1)  581/2A78 :                         
(1)  582/2A78 :                         mas_set_id_loop:
(1)  583/2A78 : C4                                 mov a,e
(1)  584/2A79 : 69                                 out MAS_TAKE_PORT
(1)  585/2A7A : 02                                 rlc
(1)  586/2A7B : E0                                 mov e,a
(1)  587/2A7C :                         
(1)  588/2A7C : FB                                 mov m,d                              ; store the id
(1)  589/2A7D : 18                                 inr d
(1)  590/2A7E : C3                                 mov a,d
(1)  591/2A7F : 3C 07                              cpi 7H                               ; stop at board7 - that is the all-write addr
(1)  592/2A81 : 48 78 2A                           jnz mas_set_id_loop
(1)  593/2A84 :                         
(1)  594/2A84 : 06 0C                              mvi a,RAM0                           ; restore PAGE2 to RAM0
(1)  595/2A86 : 59                                 out MMAP0
(1)  596/2A87 :                         
(1)  597/2A87 : 06 FF                              mvi a,0FFH                           ; restore TAKE to all high
(1)  598/2A89 : 69                                 out MAS_TAKE_PORT
(1)  599/2A8A :                         
(1)  600/2A8A : 07                                 ret
(1)  601/2A8B :                         
(1)  602/2A8B :                         ; --------------------------------------------
(1)  603/2A8B :                         ; mas_set_cmd
(1)  604/2A8B :                         ;   set cmd on blaster
(1)  605/2A8B :                         ; --------------------------------------------
(1)  606/2A8B :                         
(1)  607/2A8B :                         mas_set_cmd:
(1)  608/2A8B : D0                                 mov c,a                              ; save command in c
(1)  609/2A8C : 06 0A                              mvi a,EXTRAM2
(1)  610/2A8E : 59                                 out MMAP0
(1)  611/2A8F :                         
(1)  612/2A8F : 2E 00                              mvi h,PAGE0
(1)  613/2A91 : 36 6A                              mvi l,lo(mas_cmd)
(1)  614/2A93 :                         
(1)  615/2A93 : 1E 00                              mvi d,0                              ; d is blaster index
(1)  616/2A95 : 26 FE                              mvi e,0FEH                           ; start with d0 low, all else high
(1)  617/2A97 :                         
(1)  618/2A97 :                         mas_set_cmd_loop:
(1)  619/2A97 : C4                                 mov a,e
(1)  620/2A98 : 69                                 out MAS_TAKE_PORT
(1)  621/2A99 : 02                                 rlc
(1)  622/2A9A : E0                                 mov e,a
(1)  623/2A9B :                         
(1)  624/2A9B : FA                                 mov m,c                              ; store the command
(1)  625/2A9C : 18                                 inr d
(1)  626/2A9D : C3                                 mov a,d
(1)  627/2A9E : 3C 07                              cpi 7H                               ; stop at board7 - that is the all-write addr
(1)  628/2AA0 : 48 97 2A                           jnz mas_set_cmd_loop
(1)  629/2AA3 :                         
(1)  630/2AA3 : 06 0C                              mvi a,RAM0                           ; restore PAGE2 to RAM0
(1)  631/2AA5 : 59                                 out MMAP0
(1)  632/2AA6 :                         
(1)  633/2AA6 : 06 FF                              mvi a,0FFH                           ; restore TAKE to all high
(1)  634/2AA8 : 69                                 out MAS_TAKE_PORT
(1)  635/2AA9 :                         
(1)  636/2AA9 : 07                                 ret
(1)  637/2AAA :                         
(1)  638/2AAA :                         ; --------------------------------------------
(1)  639/2AAA :                         ; mas_exec
(1)  640/2AAA :                         ;   blaster's entrypoint
(1)  641/2AAA :                         ; --------------------------------------------
(1)  642/2AAA :                         
(1)  643/2AAA :                         mas_exec:
(1)  644/2AAA : 2E 20                              mvi h,PAGE2
(1)  645/2AAC : 36 6A                              mvi l,lo(mas_cmd)
(1)  646/2AAE : C7                                 mov a,m
(1)  647/2AAF :                         
(1)  648/2AAF : 3C 01                              cpi MAS_CMD_FREERUN
(1)  649/2AB1 : 68 E3 2A                           jz mas_go_freerun
(1)  650/2AB4 :                         
(1)  651/2AB4 : 3C 02                              cpi MAS_CMD_SINGLE
(1)  652/2AB6 : 68 D3 2A                           jz mas_go_single
(1)  653/2AB9 :                         
(1)  654/2AB9 : 3C 03                              cpi MAS_CMD_LIFE
(1)  655/2ABB : 68 15 2B                           jz mas_go_conway
(1)  656/2ABE :                         
(1)  657/2ABE : 3C 04                              cpi MAS_CMD_BANNER
(1)  658/2AC0 : 68 F0 2A                           jz mas_go_banner
(1)  659/2AC3 :                         
(1)  660/2AC3 : 44 C6 2A                           jmp mas_go_id
(1)  661/2AC6 :                         
(1)  662/2AC6 :                         ;; mas_go_id - display ID on LEDs
(1)  663/2AC6 :                         
(1)  664/2AC6 :                         mas_go_id:
(1)  665/2AC6 : 2E 20                              mvi h,PAGE2
(1)  666/2AC8 : 36 69                              mvi l,lo(mas_board)
(1)  667/2ACA : C7                                 mov a,m
(1)  668/2ACB : 51                                 out LEDPORT
(1)  669/2ACC : 00                                 hlt
(1)  670/2ACD : C0                                 nop
(1)  671/2ACE : C0                                 nop
(1)  672/2ACF : C0                                 nop
(1)  673/2AD0 : 44 C6 2A                           jmp mas_go_id
(1)  674/2AD3 :                         
(1)  675/2AD3 :                         ;; mas_go_single - display counter on LEDs, increment once, and halt
(1)  676/2AD3 :                         
(1)  677/2AD3 :                         mas_go_single:
(1)  678/2AD3 : 2E 20                              mvi h,PAGE2
(1)  679/2AD5 : 36 6B                              mvi l,lo(mas_arg)
(1)  680/2AD7 : C7                                 mov a,m
(1)  681/2AD8 : 04 01                              adi 1
(1)  682/2ADA : F8                                 mov m,a
(1)  683/2ADB : 51                                 out LEDPORT
(1)  684/2ADC : 00                                 hlt
(1)  685/2ADD : C0                                 nop
(1)  686/2ADE : C0                                 nop
(1)  687/2ADF : C0                                 nop
(1)  688/2AE0 : 44 D3 2A                           jmp mas_go_single
(1)  689/2AE3 :                         
(1)  690/2AE3 :                         ;; mas_go_freerun - free running counter
(1)  691/2AE3 :                         
(1)  692/2AE3 :                         mas_go_freerun:
(1)  693/2AE3 : A8                                 xra a
(1)  694/2AE4 :                         mas_freerun_l:
(1)  695/2AE4 : 04 01                              adi 1
(1)  696/2AE6 : 51                                 out LEDPORT
(1)  697/2AE7 : 0E 00                              mvi b,0                              ; wait a while
(1)  698/2AE9 :                         mas_freerun_l1:
(1)  699/2AE9 : 08                                 inr b
(1)  700/2AEA : 48 E9 2A                           jnz mas_freerun_l1
(1)  701/2AED : 44 E4 2A                           jmp mas_freerun_l
(1)  702/2AF0 :                         
(1)  703/2AF0 :                         ;; mas_go_banner - displays a banner on the LEDs, halts at each update
(1)  704/2AF0 :                         
(1)  705/2AF0 :                         mas_go_banner:
(1)  706/2AF0 : 2E 20                              mvi h,PAGE2
(1)  707/2AF2 : 36 69                              mvi l,lo(mas_board)
(1)  708/2AF4 : C7                                 mov a,m                              ; get board number
(1)  709/2AF5 :                         mas_go_banner_startover:
(1)  710/2AF5 : 2E 2F                              mvi h,hi(scottwashere)
(1)  711/2AF7 : 36 62                              mvi l,lo(scottwashere)
(1)  712/2AF9 : 86                                 add l                                ; add offset of banner to board number
(1)  713/2AFA : 40 FE 2A                           jnc mas_go_banner_nowrap
(1)  714/2AFD : 28                                 inr h
(1)  715/2AFE :                         mas_go_banner_nowrap:
(1)  716/2AFE : F0                                 mov l,a
(1)  717/2AFF :                         mas_go_banner_loop:
(1)  718/2AFF : C7                                 mov a,m
(1)  719/2B00 : 51                                 out LEDPORT
(1)  720/2B01 : 30                                 inr l
(1)  721/2B02 : 48 06 2B                           jnz mas_go_banner_nowrap2
(1)  722/2B05 : 28                                 inr h
(1)  723/2B06 :                         mas_go_banner_nowrap2:
(1)  724/2B06 : C6                                 mov a,l
(1)  725/2B07 : 3C DC                              cpi lo(scottwashere_end)             ; are we at the end?
(1)  726/2B09 : 06 00                              mvi a,0                              ; prepare for it...
(1)  727/2B0B : 68 F5 2A                           jz mas_go_banner_startover           ; yes, we're at the end so start over
(1)  728/2B0E : 00                                 hlt
(1)  729/2B0F : C0                                 nop
(1)  730/2B10 : C0                                 nop
(1)  731/2B11 : C0                                 nop
(1)  732/2B12 : 44 FF 2A                           jmp mas_go_banner_loop
(1)  733/2B15 :                         
(1)  734/2B15 :                         ;; mas_go_conway: conway's game of life
(1)  735/2B15 :                         
(1)  736/2B15 :                         mas_go_conway:
(1)  737/2B15 : 06 AA                              mvi a,0AAH
(1)  738/2B17 : 51                                 out LEDPORT
(1)  739/2B18 :                         mas_go_conway_lp:
(1)  740/2B18 : 00                                 hlt
(1)  741/2B19 : C0                                 nop
(1)  742/2B1A : C0                                 nop
(1)  743/2B1B : C0                                 nop
(1)  744/2B1C : 2E 20                              mvi h,PAGE2
(1)  745/2B1E : 36 69                              mvi l,lo(mas_board)
(1)  746/2B20 : C7                                 mov a,m                              ; compute our conway_page from the blaster id
(1)  747/2B21 : 3C 06                              cpi 06H                              ; board 6 has nothing to do
(1)  748/2B23 : 68 31 2B                           jz mas_go_conway_nope
(1)  749/2B26 : 04 10                              adi PAGE1                            ; ... starting at PAGE1
(1)  750/2B28 : D8                                 mov d,a
(1)  751/2B29 : 26 00                              mvi e,0
(1)  752/2B2B : 46 3B 2C                           call conway_block
(1)  753/2B2E : 44 18 2B                           jmp mas_go_conway_lp
(1)  754/2B31 :                         mas_go_conway_nope:
(1)  755/2B31 : 06 00                              mvi a,000H                           ; blank the LEDS
(1)  756/2B33 : 51                                 out LEDPORT                          ; We're not using this board.
(1)  757/2B34 : 00                                 hlt
(1)  758/2B35 : C0                                 nop
(1)  759/2B36 : C0                                 nop
(1)  760/2B37 : C0                                 nop
(1)  761/2B38 : 44 18 2B                           jmp mas_go_conway_lp
(1)  762/2B3B :                         
(1)  763/2B3B :                                    include "life.inc"
(2)    1/2B3B :                         ; ----------------------------------------------------------------------------
(2)    2/2B3B :                         ; Conway's Game of Life
(2)    3/2B3B :                         ; https://www.smbaker.com/
(2)    4/2B3B :                         ; ----------------------------------------------------------------------------
(2)    5/2B3B :                         
(2)    6/2B3B :                         ; Implemented as a 64 x 24 screen. The are two screens, the old screen and
(2)    7/2B3B :                         ; the new screen. On each iteration, we calculate conway on the old and
(2)    8/2B3B :                         ; we write the output to new. Then we copy new back to old, to setup for
(2)    9/2B3B :                         ; the next evolution.
(2)   10/2B3B :                         
(2)   11/2B3B :                         ; CONWAY_PAGE is the page where conway's buffer starts
(2)   12/2B3B :                         
(2)   13/2B3B : =10H                    CONWAY_PAGE  equ PAGE1
(2)   14/2B3B :                         
(2)   15/2B3B :                         ;; coldec and colinc destroy C
(2)   16/2B3B :                         
(2)   17/2B3B :                         coldec     macro                                ; decrement column by 1
(2)   18/2B3B :                                    mov a,l
(2)   19/2B3B :                                    ani 0C0H
(2)   20/2B3B :                                    mov c,a                              ; C has bits 7,6 of L
(2)   21/2B3B :                         
(2)   22/2B3B :                                    mov a,l
(2)   23/2B3B :                                    sui 1
(2)   24/2B3B :                                    ani 03FH
(2)   25/2B3B :                                    ora c
(2)   26/2B3B :                                    mov l,a
(2)   27/2B3B :                                    endm
(2)   28/2B3B :                         
(2)   29/2B3B :                         colinc     macro                                ; increment column by 1
(2)   30/2B3B :                                    mov a,l
(2)   31/2B3B :                                    ani 0C0H
(2)   32/2B3B :                                    mov c,a                              ; C has bits 7,6 of L
(2)   33/2B3B :                         
(2)   34/2B3B :                                    mov a,l
(2)   35/2B3B :                                    adi 1
(2)   36/2B3B :                                    ani 03FH
(2)   37/2B3B :                                    ora c
(2)   38/2B3B :                                    mov l,a
(2)   39/2B3B :                                    endm
(2)   40/2B3B :                         
(2)   41/2B3B :                         rowdec     macro                                ; decrement row by 1
(2)   42/2B3B :                                    mov a,l
(2)   43/2B3B :                                    sui 040H
(2)   44/2B3B :                                    mov l,a
(2)   45/2B3B :                                    mov a,h
(2)   46/2B3B :                                    sbi 0H
(2)   47/2B3B :                                    cpi CONWAY_PAGE-1
(2)   48/2B3B :                                    jnz nowrap
(2)   49/2B3B :                                    mvi a,CONWAY_PAGE+5
(2)   50/2B3B :                         nowrap:
(2)   51/2B3B :                                    mov h,a
(2)   52/2B3B :                                    endm
(2)   53/2B3B :                         
(2)   54/2B3B :                         rowinc     macro                                ; increment row by 1
(2)   55/2B3B :                                    mov a,l
(2)   56/2B3B :                                    adi 040H
(2)   57/2B3B :                                    mov l,a
(2)   58/2B3B :                                    mov a,h
(2)   59/2B3B :                                    aci 0H
(2)   60/2B3B :                                    cpi CONWAY_PAGE+6
(2)   61/2B3B :                                    jnz nowrap
(2)   62/2B3B :                                    mvi a,CONWAY_PAGE
(2)   63/2B3B :                         nowrap:
(2)   64/2B3B :                                    mov h,a
(2)   65/2B3B :                                    endm
(2)   66/2B3B :                         
(2)   67/2B3B :                         ; -----------------------------------------------------------
(2)   68/2B3B :                         ; conway_reset - clear the grid
(2)   69/2B3B :                         ; -----------------------------------------------------------
(2)   70/2B3B :                         
(2)   71/2B3B :                         conway_reset:
(2)   72/2B3B : 2E 10                             mvi h,CONWAY_PAGE
(2)   73/2B3D : 36 00                             mvi l,0
(2)   74/2B3F : 16 0E                             mvi c,00EH                           ; Clear 8 blocks on the first page and 6 on the second
(2)   75/2B41 :                         conway_reset_loop:
(2)   76/2B41 : 3E 00                             mvi m,0
(2)   77/2B43 : 30                                inr l
(2)   78/2B44 : 48 41 2B                          jnz conway_reset_loop
(2)   79/2B47 : 28                                inr h
(2)   80/2B48 :                         conway_reset_nowrap:
(2)   81/2B48 : 11                                dcr c
(2)   82/2B49 : 48 41 2B                          jnz conway_reset_loop
(2)   83/2B4C :                         
(2)   84/2B4C :                                   ;; load a glider
(2)   85/2B4C :                         
(2)   86/2B4C : 2E 18                             mvi h,(CONWAY_PAGE | 08H)               ; put the glider in the new screen
(2)   87/2B4E : 36 01                             mvi l,001H
(2)   88/2B50 : 3E 01                             mvi m,1
(2)   89/2B52 : 36 42                             mvi l,042H
(2)   90/2B54 : 3E 01                             mvi m,1
(2)   91/2B56 : 36 80                             mvi l,080H
(2)   92/2B58 : 3E 01                             mvi m,1
(2)   93/2B5A : 36 81                             mvi l,081H
(2)   94/2B5C : 3E 01                             mvi m,1
(2)   95/2B5E : 36 82                             mvi l,082H
(2)   96/2B60 : 3E 01                             mvi m,1
(2)   97/2B62 : 07                                ret
(2)   98/2B63 :                         
(2)   99/2B63 :                         ; -----------------------------------------------------------
(2)  100/2B63 :                         ; conway_copy - copy new to old, and output to screen
(2)  101/2B63 :                         ; -----------------------------------------------------------
(2)  102/2B63 :                         
(2)  103/2B63 :                         conway_copy:
(2)  104/2B63 : 2E 18                           mvi h, (CONWAY_PAGE | 008H)
(2)  105/2B65 : 36 00                           mvi l,0
(2)  106/2B67 : 46 7A 2B                        call conway_copy_block
(2)  107/2B6A : 46 7A 2B                        call conway_copy_block
(2)  108/2B6D : 46 7A 2B                        call conway_copy_block
(2)  109/2B70 : 46 7A 2B                        call conway_copy_block
(2)  110/2B73 : 46 7A 2B                        call conway_copy_block
(2)  111/2B76 : 46 7A 2B                        call conway_copy_block
(2)  112/2B79 : 07                              ret
(2)  113/2B7A :                         
(2)  114/2B7A :                         conway_copy_block:
(2)  115/2B7A : 1E 04                           mvi d,04H                               ; 4 rows
(2)  116/2B7C :                         conway_copy_loopr:
(2)  117/2B7C : 16 40                           mvi c,040H                              ; 64 columns
(2)  118/2B7E :                         conway_copy_loopc:
(2)  119/2B7E : C7                              mov a,m
(2)  120/2B7F : B0                              ora a
(2)  121/2B80 : 48 8D 2B                        jnz conway_copy_alive
(2)  122/2B83 : 06 20                           mvi a,' '
(2)  123/2B85 : 46 FE 26                        call CPRINT
(2)  124/2B88 : 0E 00                           mvi b,0
(2)  125/2B8A : 44 94 2B                        jmp conway_copy_set
(2)  126/2B8D :                         conway_copy_alive:
(2)  127/2B8D : 06 2A                           mvi a,'*'
(2)  128/2B8F : 46 FE 26                        call CPRINT
(2)  129/2B92 : 0E 01                           mvi b,1
(2)  130/2B94 :                         conway_copy_set:
(2)  131/2B94 : C5                              mov a,h
(2)  132/2B95 : 24 F7                           ani 0F7H                                 ; copy to old
(2)  133/2B97 : E8                              mov h,a
(2)  134/2B98 : F9                              mov m,b
(2)  135/2B99 : 34 08                           ori 08H                                 ; set H back to new
(2)  136/2B9B : E8                              mov h,a
(2)  137/2B9C : 30                              inr l
(2)  138/2B9D : 48 A1 2B                        jnz conway_copy_nowrap
(2)  139/2BA0 : 28                              inr h
(2)  140/2BA1 :                         conway_copy_nowrap:
(2)  141/2BA1 : 11                              dcr c
(2)  142/2BA2 : 48 7E 2B                        jnz conway_copy_loopc
(2)  143/2BA5 : 06 0D                           mvi a,'\r'
(2)  144/2BA7 : 46 FE 26                        call CPRINT
(2)  145/2BAA : 06 0A                           mvi a,'\n'
(2)  146/2BAC : 46 FE 26                        call CPRINT
(2)  147/2BAF : 19                              dcr d
(2)  148/2BB0 : 48 7C 2B                        jnz conway_copy_loopr
(2)  149/2BB3 : 07                              ret
(2)  150/2BB4 :                         
(2)  151/2BB4 :                         ; -----------------------------------------------------------
(2)  152/2BB4 :                         ; conway_fcopy - copy new to old, but no screen output
(2)  153/2BB4 :                         ; -----------------------------------------------------------
(2)  154/2BB4 :                         
(2)  155/2BB4 :                         conway_fcopy:
(2)  156/2BB4 : 2E 18                           mvi h, (CONWAY_PAGE | 008H)
(2)  157/2BB6 : 36 00                           mvi l,0
(2)  158/2BB8 : 46 CB 2B                        call conway_fcopy_block
(2)  159/2BBB : 46 CB 2B                        call conway_fcopy_block
(2)  160/2BBE : 46 CB 2B                        call conway_fcopy_block
(2)  161/2BC1 : 46 CB 2B                        call conway_fcopy_block
(2)  162/2BC4 : 46 CB 2B                        call conway_fcopy_block
(2)  163/2BC7 : 46 CB 2B                        call conway_fcopy_block
(2)  164/2BCA : 07                              ret
(2)  165/2BCB :                         
(2)  166/2BCB :                         conway_fcopy_block:
(2)  167/2BCB : DD                              mov d,h                                 ; D holds src page (new)
(2)  168/2BCC : C5                              mov a,h
(2)  169/2BCD : 24 F7                           ani 0F7H
(2)  170/2BCF : E0                              mov e,a                                 ; E holds dest page (old)
(2)  171/2BD0 :                         conway_fcopy_loop:
(2)  172/2BD0 : EB                              mov h,d
(2)  173/2BD1 : CF                              mov b,m
(2)  174/2BD2 : EC                              mov h,e
(2)  175/2BD3 : F9                              mov m,b
(2)  176/2BD4 : 30                              inr l
(2)  177/2BD5 : 48 D0 2B                        jnz conway_fcopy_loop
(2)  178/2BD8 : EB                              mov h,d
(2)  179/2BD9 : 28                              inr h
(2)  180/2BDA : 07                              ret
(2)  181/2BDB :                         
(2)  182/2BDB :                         ; -----------------------------------------------------------
(2)  183/2BDB :                         ; conway_print - just the screen output
(2)  184/2BDB :                         ; -----------------------------------------------------------
(2)  185/2BDB :                         
(2)  186/2BDB :                         conway_print:
(2)  187/2BDB : 2E 10                           mvi h, CONWAY_PAGE
(2)  188/2BDD : 36 00                           mvi l, 0
(2)  189/2BDF : 46 F2 2B                        call conway_print_block
(2)  190/2BE2 : 46 F2 2B                        call conway_print_block
(2)  191/2BE5 : 46 F2 2B                        call conway_print_block
(2)  192/2BE8 : 46 F2 2B                        call conway_print_block
(2)  193/2BEB : 46 F2 2B                        call conway_print_block
(2)  194/2BEE : 46 F2 2B                        call conway_print_block
(2)  195/2BF1 : 07                              ret
(2)  196/2BF2 :                         
(2)  197/2BF2 :                         ; -----------------------------------------------------------
(2)  198/2BF2 :                         ; conway_print_block - just the screen output
(2)  199/2BF2 :                         ; -----------------------------------------------------------
(2)  200/2BF2 :                         
(2)  201/2BF2 :                         conway_print_Block:
(2)  202/2BF2 : 1E 04                           mvi d,04H                               ; 4 rows
(2)  203/2BF4 :                         conway_print_loopr:
(2)  204/2BF4 : 16 40                           mvi c,040H                              ; 64 columns
(2)  205/2BF6 :                         conway_print_loopc:
(2)  206/2BF6 : C7                              mov a,m
(2)  207/2BF7 : B0                              ora a
(2)  208/2BF8 : 48 05 2C                        jnz conway_print_alive
(2)  209/2BFB : 06 20                           mvi a,' '
(2)  210/2BFD : 46 FE 26                        call CPRINT
(2)  211/2C00 : 0E 00                           mvi b,0
(2)  212/2C02 : 44 0C 2C                        jmp conway_print_next
(2)  213/2C05 :                         conway_print_alive:
(2)  214/2C05 : 06 2A                           mvi a,'*'
(2)  215/2C07 : 46 FE 26                        call CPRINT
(2)  216/2C0A : 0E 01                           mvi b,1
(2)  217/2C0C :                         conway_print_next:
(2)  218/2C0C : 30                              inr l
(2)  219/2C0D : 48 11 2C                        jnz conway_print_nowrap
(2)  220/2C10 : 28                              inr h
(2)  221/2C11 :                         conway_print_nowrap:
(2)  222/2C11 : 11                              dcr c
(2)  223/2C12 : 48 F6 2B                        jnz conway_print_loopc
(2)  224/2C15 : 06 0D                           mvi a,'\r'
(2)  225/2C17 : 46 FE 26                        call CPRINT
(2)  226/2C1A : 06 0A                           mvi a,'\n'
(2)  227/2C1C : 46 FE 26                        call CPRINT
(2)  228/2C1F : 19                              dcr d
(2)  229/2C20 : 48 F4 2B                        jnz conway_print_loopr
(2)  230/2C23 : 07                              ret
(2)  231/2C24 :                         
(2)  232/2C24 :                         ; -----------------------------------------------------------
(2)  233/2C24 :                         ; conway_full - update the full conway grid
(2)  234/2C24 :                         ; -----------------------------------------------------------
(2)  235/2C24 :                         
(2)  236/2C24 :                         conway_full:
(2)  237/2C24 : 1E 10                              mvi d, CONWAY_PAGE
(2)  238/2C26 : 26 00                              mvi e, 0
(2)  239/2C28 : 46 3B 2C                           call conway_block
(2)  240/2C2B : 46 3B 2C                           call conway_block
(2)  241/2C2E : 46 3B 2C                           call conway_block
(2)  242/2C31 : 46 3B 2C                           call conway_block
(2)  243/2C34 : 46 3B 2C                           call conway_block
(2)  244/2C37 : 46 3B 2C                           call conway_block
(2)  245/2C3A : 07                                 ret
(2)  246/2C3B :                         
(2)  247/2C3B :                         ; -----------------------------------------------------------
(2)  248/2C3B :                         ; conway_block - compute 4 rows by 64 columns
(2)  249/2C3B :                         ;
(2)  250/2C3B :                         ; input: DE = address of start of first row
(2)  251/2C3B :                         ; output: DE = address of start of next block
(2)  252/2C3B :                         ; destroys: A,B,C,H,L
(2)  253/2C3B :                         ; -----------------------------------------------------------
(2)  254/2C3B :                         
(2)  255/2C3B :                         conway_block:                                   ; D,E = conway address
(2)  256/2C3B :                         conway_loop:
(2)  257/2C3B : C4                                 mov a,e
(2)  258/2C3C : 51                                 out LEDPORT                          ; for debugging
(2)  259/2C3D :                         
(2)  260/2C3D : EB                                 mov h,d
(2)  261/2C3E : F4                                 mov l,e
(2)  262/2C3F : C7                                 mov a,m
(2)  263/2C40 :                         
(2)  264/2C40 : B0                                 ora a
(2)  265/2C41 : 68 5C 2C                           jz dead
(2)  266/2C44 :                         alive:
(2)  267/2C44 : 46 78 2C                           call conway_cell
(2)  268/2C47 : C1                                 mov a,b
(2)  269/2C48 : 3C 02                              cpi 2                                ; exactly 2 neighbors?
(2)  270/2C4A : 68 57 2C                           jz stayalive
(2)  271/2C4D : 3C 03                              cpi 3                                ; exactly 2 neighbors?
(2)  272/2C4F : 68 57 2C                           jz stayalive
(2)  273/2C52 : 0E 00                              mvi b,0
(2)  274/2C54 : 44 6C 2C                           jmp update
(2)  275/2C57 : 0E 01                   stayalive: mvi b,1
(2)  276/2C59 : 44 6C 2C                           jmp update
(2)  277/2C5C :                         dead:
(2)  278/2C5C : 46 78 2C                           call conway_cell
(2)  279/2C5F : C1                                 mov a,b
(2)  280/2C60 : 3C 03                              cpi 3                                ; are there exactly 3 neighbors
(2)  281/2C62 : 48 6A 2C                           jnz staydead
(2)  282/2C65 : 0E 01                              mvi b,1
(2)  283/2C67 : 44 6C 2C                           jmp update
(2)  284/2C6A : 0E 00                   staydead:  mvi b,0
(2)  285/2C6C :                         update:                                         ; b==0 if dead, b==1 if alive
(2)  286/2C6C : C3                                 mov a,d
(2)  287/2C6D : 34 08                              ori 08H                              ; go forward 2K
(2)  288/2C6F : E8                                 mov h,a
(2)  289/2C70 : F4                                 mov l,e
(2)  290/2C71 : F9                                 mov m,b                              ; store the new cell
(2)  291/2C72 :                         
(2)  292/2C72 : 20                                 inr e
(2)  293/2C73 : 48 3B 2C                           jnz conway_loop                      ; do all 256 entries in the block
(2)  294/2C76 :                         
(2)  295/2C76 : 18                                 inr d                                ; at the end of the loop, we wrapped so increment d
(2)  296/2C77 :                         
(2)  297/2C77 : 07                                 ret
(2)  298/2C78 :                                    
(2)  299/2C78 :                         ; -----------------------------------------------------------
(2)  300/2C78 :                         ; conway_cell - compute one conway cell
(2)  301/2C78 :                         ;
(2)  302/2C78 :                         ; input: HL = address of cell
(2)  303/2C78 :                         ; output: B = number of neighbors
(2)  304/2C78 :                         ; destroys: A,B,H,L
(2)  305/2C78 :                         ; -----------------------------------------------------------
(2)  306/2C78 :                         
(2)  307/2C78 :                                    ;; destroys a,b,h,l
(2)  308/2C78 :                         
(2)  309/2C78 :                         conway_cell:  
(2)  310/2C78 : (MACRO)                            coldec                               ; (R-1, C-1)
(2)  310/2C78 : C6                                 mov a,l
(2)  310/2C79 : 24 C0                              ani 0C0H
(2)  310/2C7B : D0                                 mov c,a                              ; C has bits 7,6 of L
(2)  310/2C7C :                         
(2)  310/2C7C : C6                                 mov a,l
(2)  310/2C7D : 14 01                              sui 1
(2)  310/2C7F : 24 3F                              ani 03FH
(2)  310/2C81 : B2                                 ora c
(2)  310/2C82 : F0                                 mov l,a
(2)  311/2C83 : (MACRO)                            rowdec
(2)  311/2C83 : C6                                 mov a,l
(2)  311/2C84 : 14 40                              sui 040H
(2)  311/2C86 : F0                                 mov l,a
(2)  311/2C87 : C5                                 mov a,h
(2)  311/2C88 : 1C 00                              sbi 0H
(2)  311/2C8A : 3C 0F                              cpi CONWAY_PAGE-1
(2)  311/2C8C : 48 91 2C                           jnz nowrap
(2)  311/2C8F : 06 15                              mvi a,CONWAY_PAGE+5
(2)  311/2C91 :                         nowrap:
(2)  311/2C91 : E8                                 mov h,a
(2)  312/2C92 : C7                                 mov a,m
(2)  313/2C93 : C8                                 mov b,a
(2)  314/2C94 :                         
(2)  315/2C94 : (MACRO)                            colinc                               ; (R-1, C)
(2)  315/2C94 : C6                                 mov a,l
(2)  315/2C95 : 24 C0                              ani 0C0H
(2)  315/2C97 : D0                                 mov c,a                              ; C has bits 7,6 of L
(2)  315/2C98 :                         
(2)  315/2C98 : C6                                 mov a,l
(2)  315/2C99 : 04 01                              adi 1
(2)  315/2C9B : 24 3F                              ani 03FH
(2)  315/2C9D : B2                                 ora c
(2)  315/2C9E : F0                                 mov l,a
(2)  316/2C9F : C7                                 mov a,m
(2)  317/2CA0 : 81                                 add b
(2)  318/2CA1 : C8                                 mov b,a
(2)  319/2CA2 :                         
(2)  320/2CA2 : (MACRO)                            colinc                               ; (R-1, C+1)
(2)  320/2CA2 : C6                                 mov a,l
(2)  320/2CA3 : 24 C0                              ani 0C0H
(2)  320/2CA5 : D0                                 mov c,a                              ; C has bits 7,6 of L
(2)  320/2CA6 :                         
(2)  320/2CA6 : C6                                 mov a,l
(2)  320/2CA7 : 04 01                              adi 1
(2)  320/2CA9 : 24 3F                              ani 03FH
(2)  320/2CAB : B2                                 ora c
(2)  320/2CAC : F0                                 mov l,a
(2)  321/2CAD : C7                                 mov a,m
(2)  322/2CAE : 81                                 add b
(2)  323/2CAF : C8                                 mov b,a
(2)  324/2CB0 :                         
(2)  325/2CB0 : (MACRO)                            rowinc                               ; (R, C+1)
(2)  325/2CB0 : C6                                 mov a,l
(2)  325/2CB1 : 04 40                              adi 040H
(2)  325/2CB3 : F0                                 mov l,a
(2)  325/2CB4 : C5                                 mov a,h
(2)  325/2CB5 : 0C 00                              aci 0H
(2)  325/2CB7 : 3C 16                              cpi CONWAY_PAGE+6
(2)  325/2CB9 : 48 BE 2C                           jnz nowrap
(2)  325/2CBC : 06 10                              mvi a,CONWAY_PAGE
(2)  325/2CBE :                         nowrap:
(2)  325/2CBE : E8                                 mov h,a
(2)  326/2CBF : C7                                 mov a,m
(2)  327/2CC0 : 81                                 add b
(2)  328/2CC1 : C8                                 mov b,a
(2)  329/2CC2 :                         
(2)  330/2CC2 : (MACRO)                            coldec                               ; (R, C-1)
(2)  330/2CC2 : C6                                 mov a,l
(2)  330/2CC3 : 24 C0                              ani 0C0H
(2)  330/2CC5 : D0                                 mov c,a                              ; C has bits 7,6 of L
(2)  330/2CC6 :                         
(2)  330/2CC6 : C6                                 mov a,l
(2)  330/2CC7 : 14 01                              sui 1
(2)  330/2CC9 : 24 3F                              ani 03FH
(2)  330/2CCB : B2                                 ora c
(2)  330/2CCC : F0                                 mov l,a
(2)  331/2CCD : (MACRO)                            coldec
(2)  331/2CCD : C6                                 mov a,l
(2)  331/2CCE : 24 C0                              ani 0C0H
(2)  331/2CD0 : D0                                 mov c,a                              ; C has bits 7,6 of L
(2)  331/2CD1 :                         
(2)  331/2CD1 : C6                                 mov a,l
(2)  331/2CD2 : 14 01                              sui 1
(2)  331/2CD4 : 24 3F                              ani 03FH
(2)  331/2CD6 : B2                                 ora c
(2)  331/2CD7 : F0                                 mov l,a
(2)  332/2CD8 : C7                                 mov a,m
(2)  333/2CD9 : 81                                 add b
(2)  334/2CDA : C8                                 mov b,a
(2)  335/2CDB :                         
(2)  336/2CDB : (MACRO)                            rowinc                               ; (R+1,C-1)
(2)  336/2CDB : C6                                 mov a,l
(2)  336/2CDC : 04 40                              adi 040H
(2)  336/2CDE : F0                                 mov l,a
(2)  336/2CDF : C5                                 mov a,h
(2)  336/2CE0 : 0C 00                              aci 0H
(2)  336/2CE2 : 3C 16                              cpi CONWAY_PAGE+6
(2)  336/2CE4 : 48 E9 2C                           jnz nowrap
(2)  336/2CE7 : 06 10                              mvi a,CONWAY_PAGE
(2)  336/2CE9 :                         nowrap:
(2)  336/2CE9 : E8                                 mov h,a
(2)  337/2CEA : C7                                 mov a,m
(2)  338/2CEB : 81                                 add b
(2)  339/2CEC : C8                                 mov b,a
(2)  340/2CED :                         
(2)  341/2CED : (MACRO)                            colinc                               ; (R+1, C)
(2)  341/2CED : C6                                 mov a,l
(2)  341/2CEE : 24 C0                              ani 0C0H
(2)  341/2CF0 : D0                                 mov c,a                              ; C has bits 7,6 of L
(2)  341/2CF1 :                         
(2)  341/2CF1 : C6                                 mov a,l
(2)  341/2CF2 : 04 01                              adi 1
(2)  341/2CF4 : 24 3F                              ani 03FH
(2)  341/2CF6 : B2                                 ora c
(2)  341/2CF7 : F0                                 mov l,a
(2)  342/2CF8 : C7                                 mov a,m
(2)  343/2CF9 : 81                                 add b
(2)  344/2CFA : C8                                 mov b,a
(2)  345/2CFB :                         
(2)  346/2CFB : (MACRO)                            colinc                               ; (R+1, C+1)
(2)  346/2CFB : C6                                 mov a,l
(2)  346/2CFC : 24 C0                              ani 0C0H
(2)  346/2CFE : D0                                 mov c,a                              ; C has bits 7,6 of L
(2)  346/2CFF :                         
(2)  346/2CFF : C6                                 mov a,l
(2)  346/2D00 : 04 01                              adi 1
(2)  346/2D02 : 24 3F                              ani 03FH
(2)  346/2D04 : B2                                 ora c
(2)  346/2D05 : F0                                 mov l,a
(2)  347/2D06 : C7                                 mov a,m
(2)  348/2D07 : 81                                 add b
(2)  349/2D08 : C8                                 mov b,a
(2)  350/2D09 : 07                                 ret
(2)  351/2D0A :                         
(1)  764/2D0A :                         
(1)  765/2D0A :                         ; --------------------------------------------
(1)  766/2D0A :                         ; prn_bin
(1)  767/2D0A :                         ;   print 8 bit binary number
(1)  768/2D0A :                         ; --------------------------------------------
(1)  769/2D0A :                         
(1)  770/2D0A :                         
(1)  771/2D0A : 0E 08                   prn_bin:   mvi b,8
(1)  772/2D0C : 02                      prn_binl:  rlc
(1)  773/2D0D : 60 1A 2D                           jc prn_bin1
(1)  774/2D10 : D8                                 mov d,a
(1)  775/2D11 : 06 30                              mvi a,'0'
(1)  776/2D13 : 46 DC 2F                           call putch
(1)  777/2D16 : C3                                 mov a,d
(1)  778/2D17 : 44 21 2D                           jmp prn_bin_next
(1)  779/2D1A : D8                      prn_bin1:  mov d,a
(1)  780/2D1B : 06 31                              mvi a,'1'
(1)  781/2D1D : 46 DC 2F                           call putch
(1)  782/2D20 : C3                                 mov a,d
(1)  783/2D21 :                         prn_bin_next:
(1)  784/2D21 : 09                                 dcr b
(1)  785/2D22 : 48 0C 2D                           jnz prn_binl
(1)  786/2D25 : 07                                 ret
(1)  787/2D26 :                                     
(1)  788/2D26 :                         mas_menutxt:
(1)  789/2D26 : 0D 0A                               db  "\r\n"
(1)  790/2D28 : 43 20 2D 20 43 6F 6E 77             db  "C - Conway Reset/Setup\r\n"
         2D30 : 61 79 20 52 65 73 65 74
         2D38 : 2F 53 65 74 75 70 0D 0A
(1)  791/2D40 : 44 20 2D 20 43 6F 6E 77             db  "D - Conway Iteration\r\n"
         2D48 : 61 79 20 49 74 65 72 61
         2D50 : 74 69 6F 6E 0D 0A      
(1)  792/2D56 : 45 20 2D 20 43 6F 6E 77             db  "E - Conway Continuous Run\r\n"
         2D5E : 61 79 20 43 6F 6E 74 69
         2D66 : 6E 75 6F 75 73 20 52 75
         2D6E : 6E 0D 0A               
(1)  793/2D71 : 49 20 2D 20 49 6E 74 65             db  "I - Interrupt\r\n"
         2D79 : 72 72 75 70 74 0D 0A   
(1)  794/2D80 : 4C 20 2D 20 4C 6F 61 64             db  "L - Load Program\r\n"
         2D88 : 20 50 72 6F 67 72 61 6D
         2D90 : 0D 0A                  
(1)  795/2D92 : 50 20 2D 20 53 65 74 20             db  "P - Set Program\r\n"
         2D9A : 50 72 6F 67 72 61 6D 0D
         2DA2 : 0A                     
(1)  796/2DA3 : 52 20 2D 20 52 65 73 65             db  "R - Reset\r\n"
         2DAB : 74 0D 0A               
(1)  797/2DAE : 53 20 2D 20 53 74 61 74             db  "S - Status\r\n"
         2DB6 : 75 73 0D 0A            
(1)  798/2DBA : 54 20 2D 20 54 61 6B 65             db  "T - Take\r\n"
         2DC2 : 0D 0A                  
(1)  799/2DC4 : 55 20 2D 20 55 6E 74 61             db  "U - Untake\r\n"
         2DCC : 6B 65 0D 0A            
(1)  800/2DD0 : 57 20 2D 20 54 61 6B 65             db  "W - TakeW\r\n"
         2DD8 : 57 0D 0A               
(1)  801/2DDB : 58 20 2D 20 4D 61 73 74             db  "X - Master Conway Reset\r\n"
         2DE3 : 65 72 20 43 6F 6E 77 61
         2DEB : 79 20 52 65 73 65 74 0D
         2DF3 : 0A                     
(1)  802/2DF4 : 59 20 2D 20 4D 61 73 74             db  "Y - Master Conway Iteration\r\n"
         2DFC : 65 72 20 43 6F 6E 77 61
         2E04 : 79 20 49 74 65 72 61 74
         2E0C : 69 6F 6E 0D 0A         
(1)  803/2E11 : 5A 20 2D 20 4D 61 73 74             db  "Z - Master Conway Continuous Run\r\n"
         2E19 : 65 72 20 43 6F 6E 77 61
         2E21 : 79 20 43 6F 6E 74 69 6E
         2E29 : 75 6F 75 73 20 52 75 6E
         2E31 : 0D 0A                  
(1)  804/2E33 : 51 20 2D 20 51 75 69 74             db  "Q - Quit\r\n"
         2E3B : 0D 0A                  
(1)  805/2E3D : 00                                  db  0
(1)  806/2E3E :                         
(1)  807/2E3E :                         
(1)  808/2E3E :                         mas_prompttxt:
(1)  809/2E3E : 0D 0A 3E 3E 00                      db  "\r\n>>",0
(1)  810/2E43 :                         
(1)  811/2E43 :                         mas_statustxt:
(1)  812/2E43 : 74 61 74 75 73 3A 00                db "tatus:",0
(1)  813/2E4A :                         
(1)  814/2E4A :                         mas_resettxt:
(1)  815/2E4A : 65 73 65 74 0D 0A 00                db "eset\r\n",0
(1)  816/2E51 :                         
(1)  817/2E51 :                         mas_inttxt:
(1)  818/2E51 : 6E 74 65 72 72 75 70 74             db "nterrupt\r\n",0
         2E59 : 0D 0A 00               
(1)  819/2E5C :                         
(1)  820/2E5C :                         mas_intreltxt:
(1)  821/2E5C : 2D 49 6E 74 65 72 72 75             db "-Interrupt Release\r\n",0
         2E64 : 70 74 20 52 65 6C 65 61
         2E6C : 73 65 0D 0A 00         
(1)  822/2E71 :                         
(1)  823/2E71 :                         mas_loadtxt:
(1)  824/2E71 : 6F 61 64 0D 0A 00                   db "oad\r\n",0
(1)  825/2E77 :                         
(1)  826/2E77 :                         mas_setpgmtxt:
(1)  827/2E77 : 72 6F 67 72 61 6D 20 53             db "rogram Set\r\n",0
         2E7F : 65 74 0D 0A 00         
(1)  828/2E84 :                         
(1)  829/2E84 :                         mas_pgmtxt:
(1)  830/2E84 : 30 20 2D 20 49 44 0D 0A             db "0 - ID\r\n"
(1)  831/2E8C : 31 20 2D 20 46 72 65 65             db "1 - Free Run Counter\r\n"
         2E94 : 20 52 75 6E 20 43 6F 75
         2E9C : 6E 74 65 72 0D 0A      
(1)  832/2EA2 : 32 20 2D 20 43 6F 75 6E             db "2 - Count and Halt\r\n"
         2EAA : 74 20 61 6E 64 20 48 61
         2EB2 : 6C 74 0D 0A            
(1)  833/2EB6 : 33 20 2D 20 43 6F 6E 77             db "3 - Conway\r\n"
         2EBE : 61 79 0D 0A            
(1)  834/2EC2 : 34 20 2D 20 42 61 6E 6E             db "4 - Banner\r\n"
         2ECA : 65 72 0D 0A            
(1)  835/2ECE : 3E 3E 20 70 72 6F 67 72             db ">> program (1 digit): ",0
         2ED6 : 61 6D 20 28 31 20 64 69
         2EDE : 67 69 74 29 3A 20 00   
(1)  836/2EE5 :                         
(1)  837/2EE5 :                         mas_taketxt:
(1)  838/2EE5 : 61 6B 65 20 62 6C 61 73             db "ake blaster (1 digit): ",0
         2EED : 74 65 72 20 28 31 20 64
         2EF5 : 69 67 69 74 29 3A 20 00
(1)  839/2EFD :                         
(1)  840/2EFD :                         mas_takebanktxt:
(1)  841/2EFD : 0D 0A 42 61 6E 6B 20 28             db "\r\nBank (1 digit): ",0
         2F05 : 31 20 64 69 67 69 74 29
         2F0D : 3A 20 00               
(1)  842/2F10 :                         
(1)  843/2F10 :                         mas_takewtxt:
(1)  844/2F10 : 61 6B 65 20 77 72 69 74             db "ake write\r\n",0
         2F18 : 65 0D 0A 00            
(1)  845/2F1C :                         
(1)  846/2F1C :                         mas_untaketxt:
(1)  847/2F1C : 6E 74 61 6B 65 0D 0A 00             db "ntake\r\n",0
(1)  848/2F24 :                         
(1)  849/2F24 :                         mas_stucktxt:
(1)  850/2F24 : 73 74 75 63 6B 0D 0A 00             db "stuck\r\n",0
(1)  851/2F2C :                         
(1)  852/2F2C :                         mas_auto_id_txt:
(1)  853/2F2C : 61 75 74 6F 73 74 61 72             db "autostart id\r\n",0
         2F34 : 74 20 69 64 0D 0A 00   
(1)  854/2F3B :                         
(1)  855/2F3B :                         mas_auto_free_txt:
(1)  856/2F3B : 61 75 74 6F 73 74 61 72             db "autostart freerun\r\n",0
         2F43 : 74 20 66 72 65 65 72 75
         2F4B : 6E 0D 0A 00            
(1)  857/2F4F :                         
(1)  858/2F4F :                         mas_auto_conway_txt:
(1)  859/2F4F : 61 75 74 6F 73 74 61 72             db "autostart conway\r\n",0
         2F57 : 74 20 63 6F 6E 77 61 79
         2F5F : 0D 0A 00               
(1)  860/2F62 :                         
(1)  861/2F62 :                         scottwashere:
(1)  862/2F62 : 64 F6 B2 9A CE 4C 00 00             db 064H, 0F6H, 0B2H, 09AH, 0CEH, 04CH, 000H, 000H, 038H, 07CH
         2F6A : 38 7C                  
(1)  863/2F6C : C6 82 82 C6 44 00 38 7C             db 0C6H, 082H, 082H, 0C6H, 044H, 000H, 038H, 07CH, 0C6H, 082H
         2F74 : C6 82                  
(1)  864/2F76 : C6 7C 38 00 C0 82 FE FE             db 0C6H, 07CH, 038H, 000H, 0C0H, 082H, 0FEH, 0FEH, 082H, 0C0H
         2F7E : 82 C0                  
(1)  865/2F80 : 00 00 C0 82 FE FE 82 C0             db 000H, 000H, 0C0H, 082H, 0FEH, 0FEH, 082H, 0C0H, 000H, 000H
         2F88 : 00 00                  
(1)  866/2F8A : 00 00 00 00 00 00 00 00             db 000H, 000H, 000H, 000H, 000H, 000H, 000H, 000H, 0FEH, 0FEH
         2F92 : FE FE                  
(1)  867/2F94 : 0C 18 0C FE FE 00 3E 7E             db 00CH, 018H, 00CH, 0FEH, 0FEH, 000H, 03EH, 07EH, 0C8H, 0C8H
         2F9C : C8 C8                  
(1)  868/2F9E : 7E 3E 00 00 64 F6 B2 9A             db 07EH, 03EH, 000H, 000H, 064H, 0F6H, 0B2H, 09AH, 0CEH, 04CH
         2FA6 : CE 4C                  
(1)  869/2FA8 : 00 00 00 00 00 00 00 00             db 000H, 000H, 000H, 000H, 000H, 000H, 000H, 000H, 000H, 000H
         2FB0 : 00 00                  
(1)  870/2FB2 : FE FE 10 10 FE FE 00 00             db 0FEH, 0FEH, 010H, 010H, 0FEH, 0FEH, 000H, 000H, 082H, 0FEH
         2FBA : 82 FE                  
(1)  871/2FBC : FE 92 BA 82 C6 00 82 FE             db 0FEH, 092H, 0BAH, 082H, 0C6H, 000H, 082H, 0FEH, 0FEH, 090H
         2FC4 : FE 90                  
(1)  872/2FC6 : 98 FE 66 00 82 FE FE 92             db 098H, 0FEH, 066H, 000H, 082H, 0FEH, 0FEH, 092H, 0BAH, 082H
         2FCE : BA 82                  
(1)  873/2FD0 : C6 00 00 00 00 00 00 00             db 0C6H, 000H, 000H, 000H, 000H, 000H, 000H, 000H, 000H, 000H
         2FD8 : 00 00                  
(1)  874/2FDA : 00 00                               db 000H, 000H
(1)  875/2FDC :                         scottwashere_end:
    1275/2FDC : [1273]                              endif
    1276/2FDC :                         
    1277/2FDC :                         ;------------------------------------------------------------------------        
    1278/2FDC :                         ; For SBC, include the sound library
    1279/2FDC :                         ;------------------------------------------------------------------------
    1280/2FDC :                         
    1281/2FDC : =>UNDEFINED                         ifdef sound
    1282/2FDC :                                     include "sound.inc"
    1283/2FDC : [1281]                              endif
    1284/2FDC :                         
    1285/2FDC :                         ;------------------------------------------------------------------------        
    1286/2FDC :                         ; sends the character in A out from the serial port at 2400 bps.
    1287/2FDC :                         ; uses A and E.
    1288/2FDC :                         ; for 2400 bps, each bit should be 104 cycles
    1289/2FDC :                         ;------------------------------------------------------------------------
    1290/2FDC : E1                      putch:      mov e,b                 ; save B
    1291/2FDD : 46 FE 26                            call CPRINT
    1292/2FE0 : CC                                  mov b,e
    1293/2FE1 : 07                                  ret
    1294/2FE2 :                                     
    1295/2FE2 :                         ;-----------------------------------------------------------------------------------------
    1296/2FE2 :                         ; wait for a character from the serial port. 
    1297/2FE2 :                         ; echo each bit as it is received. return the received character in A.
    1298/2FE2 :                         ; uses A and E.
    1299/2FE2 :                         ;-----------------------------------------------------------------------------------------
    1300/2FE2 :                         
    1301/2FE2 : E1                      getche:     mov e,b            ; save B
    1302/2FE3 : =>UNDEFINED                         ifdef bitbang
    1303/2FE3 :                                     CALL CINP          ; bitbang does not take kindly to calling CPRINT separately
    1304/2FE3 : =>TRUE                              else
    1305/2FE3 : 46 26 27                            call CINPNE
    1306/2FE6 : 24 7F                               ani 07FH           ; strip high bit, for H9, otherwise we'll echo it
    1307/2FE8 :                         
    1308/2FE8 : =>UNDEFINED                         ifdef nocr
    1309/2FE8 :                                     cpi 00DH
    1310/2FE8 :                                     jz getche_so
    1311/2FE8 : [1308]                              endif
    1312/2FE8 :                         
    1313/2FE8 : 46 FE 26                            call CPRINT
    1314/2FEB : [1302]                              endif
    1315/2FEB : CC                      getche_so:  mov b,e
    1316/2FEC : 07                                  ret
    1317/2FED :                         
    1318/2FED :                         ;-----------------------------------------------------------------------------------------
    1319/2FED :                         ; wait for a character from the serial port. 
    1320/2FED :                         ; do not echo. return the character in A.
    1321/2FED :                         ; uses A and E.
    1322/2FED :                         ; for 2400 bps, each bit should be 104 cycles
    1323/2FED :                         ;-----------------------------------------------------------------------------------------
    1324/2FED :                         
    1325/2FED : E1                      getch:      mov e,b            ; save B
    1326/2FEE : 46 26 27                            call CINPNE
    1327/2FF1 : 24 7F                               ani 07FH           ; strip high bit, for H9, otherwise we'll echo it
    1328/2FF3 : CC                                  mov b,e
    1329/2FF4 : 07                                  ret
    1330/2FF5 :                         
    1331/2FF5 : E1                      getch_bin:  mov e,b            ; save B
    1332/2FF6 : 46 26 27                            call CINPNE        ; do not strip the high bit here
    1333/2FF9 : CC                                  mov b,e
    1334/2FFA : 07                                  ret
    1335/2FFB :                                     
    1336/2FFB : 0D 0A 0D 0A             titletxt:   db  "\r\n\r\n"
    1337/2FFF : 53 65 72 69 61 6C 20 4D             db  "Serial Monitor for Intel 8008 H8 CPU Board V2.0\r\n"
         3007 : 6F 6E 69 74 6F 72 20 66
         300F : 6F 72 20 49 6E 74 65 6C
         3017 : 20 38 30 30 38 20 48 38
         301F : 20 43 50 55 20 42 6F 61
         3027 : 72 64 20 56 32 2E 30 0D
         302F : 0A                     
    1338/3030 : 4F 72 69 67 69 6E 61 6C             db  "Original by Jim Loos\r\n"
         3038 : 20 62 79 20 4A 69 6D 20
         3040 : 4C 6F 6F 73 0D 0A      
    1339/3046 : 4D 6F 64 69 66 69 65 64             db  "Modified by Scott Baker, https://www.smbaker.com/ for h8 project\r\n"
         304E : 20 62 79 20 53 63 6F 74
         3056 : 74 20 42 61 6B 65 72 2C
         305E : 20 68 74 74 70 73 3A 2F
         3066 : 2F 77 77 77 2E 73 6D 62
         306E : 61 6B 65 72 2E 63 6F 6D
         3076 : 2F 20 66 6F 72 20 68 38
         307E : 20 70 72 6F 6A 65 63 74
         3086 : 0D 0A                  
    1340/3088 : 41 73 73 65 6D 62 6C 65             db  "Assembled on ",DATE," at ",TIME,"\r\n",0
         3090 : 64 20 6F 6E 20 38 2F 31
         3098 : 36 2F 32 30 32 34 20 61
         30A0 : 74 20 38 3A 33 32 3A 36
         30A8 : 0D 0A 00               
    1341/30AB : 0D 0A                   menutxt:    db  "\r\n"
    1342/30AD : 42 20 2D 20 42 61 73 69             db  "B - Basic\r\n"
         30B5 : 63 0D 0A               
    1343/30B8 : 43 20 2D 20 43 61 6C 6C             db  "C - Call subroutine\r\n"
         30C0 : 20 73 75 62 72 6F 75 74
         30C8 : 69 6E 65 0D 0A         
    1344/30CD : 44 20 2D 20 44 75 6D 70             db  "D - Dump RAM\r\n"
         30D5 : 20 52 41 4D 0D 0A      
    1345/30DB : 45 20 2D 20 45 78 61 6D             db  "E - Examine/Modify RAM\r\n"            
         30E3 : 69 6E 65 2F 4D 6F 64 69
         30EB : 66 79 20 52 41 4D 0D 0A
    1346/30F3 : 46 20 2D 20 46 69 6C 6C             db  "F - Fill RAM\r\n"
         30FB : 20 52 41 4D 0D 0A      
    1347/3101 : 48 20 2D 20 48 65 78 20             db  "H - Hex file download\r\n"
         3109 : 66 69 6C 65 20 64 6F 77
         3111 : 6E 6C 6F 61 64 0D 0A   
    1348/3118 : 47 20 2D 20 47 6F 20 74             db  "G - Go to address\r\n"
         3120 : 6F 20 61 64 64 72 65 73
         3128 : 73 0D 0A               
    1349/312B : 49 20 2D 20 49 6E 70 75             db  "I - Input byte from port\r\n"
         3133 : 74 20 62 79 74 65 20 66
         313B : 72 6F 6D 20 70 6F 72 74
         3143 : 0D 0A                  
    1350/3145 :                         
    1351/3145 : =>DEFINED                           ifdef master
    1352/3145 : 4D 20 2D 20 4D 61 73 74             db  "M - Master\r\n"
         314D : 65 72 0D 0A            
    1353/3151 : [1351]                              endif
    1354/3151 :                         
    1355/3151 : 4F 20 2D 20 4F 75 74 70             db  "O - Output byte to port\r\n"
         3159 : 75 74 20 62 79 74 65 20
         3161 : 74 6F 20 70 6F 72 74 0D
         3169 : 0A                     
    1356/316A : 52 20 2D 20 52 61 77 20             db  "R - Raw binary file download\r\n"
         3172 : 62 69 6E 61 72 79 20 66
         317A : 69 6C 65 20 64 6F 77 6E
         3182 : 6C 6F 61 64 0D 0A      
    1357/3188 : 53 20 2D 20 53 77 69 74             db  "S - Switch bank and load rom\r\n"
         3190 : 63 68 20 62 61 6E 6B 20
         3198 : 61 6E 64 20 6C 6F 61 64
         31A0 : 20 72 6F 6D 0D 0A      
    1358/31A6 :                         
    1359/31A6 : =>UNDEFINED                         ifdef frontpanel_isr
    1360/31A6 :                                     db  "Y - Enable/Start interrupts\r\n"
    1361/31A6 :                                     db  "Z - Disable interrupts\r\n"
    1362/31A6 : [1359]                              endif ; frontpanel_isr
    1363/31A6 :                         
    1364/31A6 : 00                                  db 0
    1365/31A7 :                         
    1366/31A7 : 0D 0A 3E 3E 00          prompttxt:  db  "\r\n>>",0
    1367/31AC : 75 6D 70 20 6D 65 6D 6F dumptxt:    db  "ump memory\r\n",0
         31B4 : 72 79 0D 0A 00         
    1368/31B9 : 78 61 6D 69 6E 65 20 6D examinetxt: db  "xamine memory\r\n",0
         31C1 : 65 6D 6F 72 79 0D 0A 00
    1369/31C9 : 69 6C 6C 20 6D 65 6D 6F filltxt:    db  "ill memory\r\n",0
         31D1 : 72 79 0D 0A 00         
    1370/31D6 : 75 6D 70 20 74 6F 20 61 jumptxt:    db  "ump to address: (in hex) ",0 
         31DE : 64 64 72 65 73 73 3A 20
         31E6 : 28 69 6E 20 68 65 78 29
         31EE : 20 00                  
    1371/31F0 : 61 6C 6C 20 73 75 62 72 calltxt:    db  "all subroutine at address: ",0 
         31F8 : 6F 75 74 69 6E 65 20 61
         3200 : 74 20 61 64 64 72 65 73
         3208 : 73 3A 20 00            
    1372/320C : 6F 20 74 6F 20 61 64 64 gototxt:    db  "o to address: (in hex) ",0
         3214 : 72 65 73 73 3A 20 28 69
         321C : 6E 20 68 65 78 29 20 00
    1373/3224 : 6E 70 75 74 20 62 79 74 inputtxt    db  "nput byte from port",0
         322C : 65 20 66 72 6F 6D 20 70
         3234 : 6F 72 74 00            
    1374/3238 : 75 74 70 75 74 20 62 79 outputtxt   db  "utput byte to port",0 
         3240 : 74 65 20 74 6F 20 70 6F
         3248 : 72 74 00               
    1375/324B : 61 77 20 62 69 6E 61 72 binloadtxt: db  "aw binary file download\r\n",0 
         3253 : 79 20 66 69 6C 65 20 64
         325B : 6F 77 6E 6C 6F 61 64 0D
         3263 : 0A 00                  
    1376/3265 : 65 78 20 66 69 6C 65 20 hexloadtxt: db  "ex file download\r\n",0
         326D : 64 6F 77 6E 6C 6F 61 64
         3275 : 0D 0A 00               
    1377/3278 : 0D 0A 41 64 64 72 65 73 addresstxt: db  "\r\nAddress: (in hex) ",0 
         3280 : 73 3A 20 28 69 6E 20 68
         3288 : 65 78 29 20 00         
    1378/328D : 20 20 43 6F 75 6E 74 3A hcounttxt:  db  "  Count: (in hex) ",0
         3295 : 20 28 69 6E 20 68 65 78
         329D : 29 20 00               
    1379/32A0 : 20 20 56 61 6C 75 65 3A valuetxt:   db  "  Value: (in hex) ",0   
         32A8 : 20 28 69 6E 20 68 65 78
         32B0 : 29 20 00               
    1380/32B3 : 0D 0A 20 20 20 20 20 30 columntxt:  db  "\r\n     00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F",0
         32BB : 30 20 30 31 20 30 32 20
         32C3 : 30 33 20 30 34 20 30 35
         32CB : 20 30 36 20 30 37 20 30
         32D3 : 38 20 30 39 20 30 41 20
         32DB : 30 42 20 30 43 20 30 44
         32E3 : 20 30 45 20 30 46 00   
    1381/32EA : 0D 0A 57 61 69 74 69 6E dnldtxt:    db  "\r\nWaiting for the binary file download.\r\n",0   
         32F2 : 67 20 66 6F 72 20 74 68
         32FA : 65 20 62 69 6E 61 72 79
         3302 : 20 66 69 6C 65 20 64 6F
         330A : 77 6E 6C 6F 61 64 2E 0D
         3312 : 0A 00                  
    1382/3314 : 0D 0A 57 61 69 74 69 6E waittxt:    db  "\r\nWaiting for the Intel hex file download.\r\n",0
         331C : 67 20 66 6F 72 20 74 68
         3324 : 65 20 49 6E 74 65 6C 20
         332C : 68 65 78 20 66 69 6C 65
         3334 : 20 64 6F 77 6E 6C 6F 61
         333C : 64 2E 0D 0A 00         
    1383/3341 : 0D 0A 46 69 6C 65 20 6C loadedtxt:  db  "\r\nFile loaded.\r\n",0  
         3349 : 6F 61 64 65 64 2E 0D 0A
         3351 : 00                     
    1384/3352 : 0D 0A 43 68 65 63 6B 73 errortxt:   db  "\r\nChecksum error!\r\n",0
         335A : 75 6D 20 65 72 72 6F 72
         3362 : 21 0D 0A 00            
    1385/3366 : 20 2D 2D 3E 20 00       arrowtxt:   db  " --> ",0
    1386/336C : 20 20 4E 65 77 3A 20 00 newvaluetxt:db  "  New: ",0
    1387/3374 : 0D 0A 50 6F 72 74 20 61 porttxt     db  "\r\nPort address: (in hex) ",0
         337C : 64 64 72 65 73 73 3A 20
         3384 : 28 69 6E 20 68 65 78 29
         338C : 20 00                  
    1388/338E : 0D 0A 4F 75 74 70 75 74 bytetxt     db  "\r\nOutput byte:  (in hex) ",0
         3396 : 20 62 79 74 65 3A 20 20
         339E : 28 69 6E 20 68 65 78 29
         33A6 : 20 00                  
    1389/33A8 : 0D 0A 49 6E 74 65 6C 20 copytxt     db  "\r\nIntel 8008 SBC Monitor � Copyright 2022 by Jim Loos\r\n",0
         33B0 : 38 30 30 38 20 53 42 43
         33B8 : 20 4D 6F 6E 69 74 6F 72
         33C0 : 20 EF BF BD 20 43 6F 70
         33C8 : 79 72 69 67 68 74 20 32
         33D0 : 30 32 32 20 62 79 20 4A
         33D8 : 69 6D 20 4C 6F 6F 73 0D
         33E0 : 0A 00                  
    1390/33E2 : 61 73 69 63 0D 0A 00    rombastxt   db  "asic\r\n",0
    1391/33E9 : 77 69 74 63 68 20 61 6E switchtxt   db  "witch and load bank (one digit): ",0
         33F1 : 64 20 6C 6F 61 64 20 62
         33F9 : 61 6E 6B 20 28 6F 6E 65
         3401 : 20 64 69 67 69 74 29 3A
         3409 : 20 00                  
    1392/340B : 49 6E 76 61 6C 69 64 20 badbanktxt  db  "Invalid bank number\r\n",0
         3413 : 62 61 6E 6B 20 6E 75 6D
         341B : 62 65 72 0D 0A 00      
    1393/3421 : 72 6F 67 72 61 6D 20 74 progtxt     db  "rogram to RAM from bank (one digit): ",0
         3429 : 6F 20 52 41 4D 20 66 72
         3431 : 6F 6D 20 62 61 6E 6B 20
         3439 : 28 6F 6E 65 20 64 69 67
         3441 : 69 74 29 3A 20 00      
    1394/3447 : 0D 0A 53 77 69 74 63 68 loadingtxt  db  "\r\nSwitching banks and jumping...\r\n",0
         344F : 69 6E 67 20 62 61 6E 6B
         3457 : 73 20 61 6E 64 20 6A 75
         345F : 6D 70 69 6E 67 2E 2E 2E
         3467 : 0D 0A 00               
    1395/346A : 6F 70 20 73 74 61 63 6B poptxt:     db  "op stack\r\n",0
         3472 : 0D 0A 00               
    1396/3475 : 2D 70 55 73 68 20 73 74 pushtxt:    db  "-pUsh stack: (in hex) ",0
         347D : 61 63 6B 3A 20 28 69 6E
         3485 : 20 68 65 78 29 20 00   
    1397/348C : 2D 64 69 73 61 62 6C 65 disabletxt: db  "-disable iterrupts\r\n",0
         3494 : 20 69 74 65 72 72 75 70
         349C : 74 73 0D 0A 00         
    1398/34A1 : 2D 65 6E 61 62 6C 65 20 enabletxt:  db  "-enable iterrupts\r\n",0
         34A9 : 69 74 65 72 72 75 70 74
         34B1 : 73 0D 0A 00            
 AS V1.42 Beta [Bld 273] - Source File monitor.asm - Page 2 - 8/16/2024 8:32:6


  Symbol Table (* = unused):
  --------------------------

 ADDRESSTXT :                  3278 C | *ALIVE :                       2C44 C |
*ARCHITECTURE :                                        "i386-unknown-win32" - |
 ARROWTXT :                    3366 C |  ASCII2HEX :                   26B2 C |
 ASCII2HEX1 :                  26B9 C |  ASCII2HEX2 :                  26C5 C |
*BADBANKTXT :                  340B C |  BFINISHED :                   22B8 C |
 BINDL :                       226E C |  BINDL0 :                      2297 C |
 BINDL1 :                      229B C |  BINDL2 :                      22AC C |
 BINLOADTXT :                  324B C |  BYTETXT :                     338E C |
 CALLSUB :                     23B4 C |  CALLTXT :                     31F0 C |
*CASESENSITIVE :                  0 - | *CINP :                        270A - |
 CINP8251 :                    270A C |  CINP8251NE :                  2726 C |
*CINP8251SO :                  2725 C |  CINPNE :                      2726 - |
 CKSUMERR :                    2340 C |  CLS :                         298D C |
 COLUMNTXT :                   32B3 C | *CONSTPI :        3.141592653589793 - |
 CONS_CMD :                      13 - |  CONS_MODE :                     13 - |
 CONS_RHR :                       2 - |  CONS_STAT :                      3 - |
 CONS_THR :                      12 - |  CONWAY_BLOCK :                2C3B C |
 CONWAY_CELL :                 2C78 C |  CONWAY_COPY :                 2B63 C |
 CONWAY_COPY_ALIVE :           2B8D C |  CONWAY_COPY_BLOCK :           2B7A C |
 CONWAY_COPY_LOOPC :           2B7E C |  CONWAY_COPY_LOOPR :           2B7C C |
 CONWAY_COPY_NOWRAP :          2BA1 C |  CONWAY_COPY_SET :             2B94 C |
*CONWAY_FCOPY :                2BB4 C |  CONWAY_FCOPY_BLOCK :          2BCB C |
 CONWAY_FCOPY_LOOP :           2BD0 C |  CONWAY_FULL :                 2C24 C |
 CONWAY_LOOP :                 2C3B C |  CONWAY_PAGE :                   10 - |
 CONWAY_PRINT :                2BDB C |  CONWAY_PRINT_ALIVE :          2C05 C |
 CONWAY_PRINT_BLOCK :          2BF2 C |  CONWAY_PRINT_LOOPC :          2BF6 C |
 CONWAY_PRINT_LOOPR :          2BF4 C |  CONWAY_PRINT_NEXT :           2C0C C |
 CONWAY_PRINT_NOWRAP :         2C11 C |  CONWAY_RESET :                2B3B C |
 CONWAY_RESET_LOOP :           2B41 C | *CONWAY_RESET_NOWRAP :         2B48 C |
 COPYTXT :                     33A8 C |  CPIN8251NE_HAVE_CHAR :        273A C |
 CPIN8251_HAVE_CHAR :          271E C |  CPRINT :                      26FE - |
 CPRINT8251 :                  26FE C |  CRDY :                        273F - |
 CRDY8251 :                    273F C |  CRLF :                        26C7 C |
 DATE :                 "8/16/2024" - |  DEAD :                        2C5C C |
*DEBUGLED :                       1 - |  DECBC :                       244A C |
 DECBC1 :                      2450 C |  DIPPORT :                        0 - |
*DISABLETXT :                  348C C |  DNLDTXT :                     32EA C |
 DUMP :                        2152 C |  DUMP2 :                       2171 C |
 DUMP3 :                       217F C |  DUMP4 :                       2195 C |
 DUMP5 :                       21A1 C |  DUMP6 :                       21AC C |
 DUMP7 :                       21AE C |  DUMPTXT :                     31AC C |
 EMPTYFUNC :                   26E4 C | *ENABLETXT :                   34A1 C |
 ERRORTXT :                    3352 C |  ESCAPE :                        1B - |
 ESCCOUNT :                    1FF6 - |  EXAMINE :                     2203 C |
 EXAMINE1 :                    221C C |  EXAMINE3 :                    2245 C |
 EXAMINE4 :                    2254 C |  EXAMINE5 :                    2261 C |
 EXAMINETXT :                  31B9 C |  EXTRAM0 :                        8 - |
 EXTRAM1 :                        9 - |  EXTRAM2 :                       0A - |
 EXTRAM3 :                       0B - | *FALSE :                          0 - |
 FILL :                        21C3 C |  FILLLOOP :                    21F0 C |
 FILLLOOP1 :                   21F6 C |  FILLTXT :                     31C9 C |
*FINISHED :                    2330 C |  FPANINIT :                    26E4 - |
 FPDISABLE :                   26E4 - |  FPENABLE :                    26E4 - |
*FP_DIGSEL :                     14 - | *FP_DIGVAL :                     15 - |
*FP_KBD :                         4 - |  GETCH :                       2FED C |
 GETCHE :                      2FE2 C | *GETCHE_SO :                   2FEB C |
 GETCH_BIN :                   2FF5 C |  GET_ADDR :                    2452 C |
 GET_COUNT :                   2468 C | *GET_DEC :                     24B5 C |
 GET_DEC1 :                    24B9 C |  GET_DEC2 :                    24C3 C |
 GET_DEC3 :                    24CC C |  GET_FOUR :                    2575 C |
 GET_FOUR1 :                   2580 C |  GET_FOUR2 :                   258A C |
 GET_FOUR3 :                   2594 C |  GET_FOUR4 :                   25AC C |
 GET_FOUR5 :                   25B0 C |  GET_FOUR6 :                   25B7 C |
 GET_FOUR7 :                   25CA C |  GET_FOUR8 :                   25D4 C |
 GET_FOUR9 :                   2601 C |  GET_HEX :                     2655 C |
 GET_HEX1 :                    2675 C |  GET_HEX2 :                    2684 C |
 GET_HEX3 :                    268B C |  GET_ONE :                     2642 C |
 GET_ONE_ERR :                 264F C |  GET_TWO :                     260C C |
 GET_TWO2 :                    2632 C |  GET_TWO3 :                    2639 C |
 GET_TWO5 :                    263C C |  GOTO :                        2392 C |
 GOTOTXT :                     320C C |  GO_ROM :                      2054 C |
 GO_ROM0 :                     2040 C | *GO_ROM1 :                     2045 C |
*GO_ROM2 :                     204A C | *GO_ROM3 :                     204F C |
*H8_CONS_C :                    0FB - | *H8_CONS_D :                    0FA - |
*H8_DIGSEL :                    0F0 - | *H8_DIGVAL :                    0F1 - |
 H8_IN2 :                         2 - |  H8_IN3 :                         3 - |
 H8_IN4 :                         4 - | *H8_IN5 :                         5 - |
*H8_IN6 :                         6 - |  H8_IN7 :                         7 - |
*H8_OUT0 :                       10 - | *H8_OUT1 :                       11 - |
 H8_OUT2 :                       12 - |  H8_OUT3 :                       13 - |
 H8_OUT4 :                       14 - |  H8_OUT5 :                       15 - |
*H8_OUT6 :                       16 - |  H8_OUT7 :                       17 - |
*H8_SPREH :                      1A - | *H8_SPREL :                      19 - |
*H8_STACK :                      18 - | *HAS64 :                          0 - |
 HCOUNTTXT :                   328D C |  HEX2ASCII :                   26A4 C |
 HEX2ASCII1 :                  26AF C |  HEXBYTE :                     234D C |
 HEXDL :                       22C8 C |  HEXDL1 :                      22D9 C |
 HEXDL1A :                     22E1 C |  HEXDL2 :                      2303 C |
 HEXDL3 :                      230E C |  HEXDL4 :                      2315 C |
 HEXLOADTXT :                  3265 C |  HOME :                        29A2 C |
*INCCONS :                        1 - | *INCH8 :                          1 - |
*INCSTACK :                       1 - |  INPUT :                       23D9 C |
 INPUTTXT :                    3224 C | *IPOLL :                          1 - |
 JMP_ADDR :                    1FFC - |  JUMP1 :                       23A2 C |
*JUMPTXT :                     31D6 C |  LEDPORT :                        8 - |
*LISTON :                         1 - |  LOADEDTXT :                   3341 C |
 LOADINGTXT :                  3447 C | *MACEXP :                         7 - |
*MASTER :                         1 - |  MAS_ARG :                     206B C |
 MAS_AUTO_CONWAY :             2789 C |  MAS_AUTO_CONWAY_TXT :         2F4F C |
 MAS_AUTO_FREERUN :            2771 C |  MAS_AUTO_FREE_TXT :           2F3B C |
 MAS_AUTO_ID :                 2759 C |  MAS_AUTO_ID_TXT :             2F2C C |
 MAS_BOARD :                   2069 C |  MAS_CMD :                     206A C |
 MAS_CMD_BANNER :                 4 - |  MAS_CMD_FREERUN :                1 - |
 MAS_CMD_ID :                     0 - |  MAS_CMD_LIFE :                   3 - |
 MAS_CMD_SINGLE :                 2 - |  MAS_CONWAY :                  290C C |
 MAS_CONWAY_COPY :             29FF C |  MAS_CONWAY_INIT_ITER :        29E5 C |
 MAS_CONWAY_RESET_SUPER :      2942 C |  MAS_CONWAY_RUN :              2927 C |
 MAS_CONWAY_RUN_LOOP :         292A C |  MAS_CONWAY_RUN_SUPER :        2975 C |
 MAS_CONWAY_RUN_SUPER_LOOP :   2978 C |  MAS_CONWAY_SHOW_ITER :        29EC C |
 MAS_CONWAY_SHOW_ITER_NOWRAP : 29F7 C |  MAS_CONWAY_SUPER :            2939 C |
 MAS_CONWAY_TRIGGER :          2971 C |  MAS_CONWAY_UPDATE :           291B C |
 MAS_CONWAY_UPDATE_SUPER :     2958 C |  MAS_CONWAY_WAIT :             296A C |
 MAS_COPY1 :                   2A3E C |  MAS_COPY2 :                   2A40 C |
 MAS_COPY_ROM :                2A31 C |  MAS_EXEC :                    2AAA C |
 MAS_FREERUN_L :               2AE4 C |  MAS_FREERUN_L1 :              2AE9 C |
 MAS_GO_BANNER :               2AF0 C |  MAS_GO_BANNER_LOOP :          2AFF C |
 MAS_GO_BANNER_NOWRAP :        2AFE C |  MAS_GO_BANNER_NOWRAP2 :       2B06 C |
 MAS_GO_BANNER_STARTOVER :     2AF5 C |  MAS_GO_CONWAY :               2B15 C |
 MAS_GO_CONWAY_LP :            2B18 C |  MAS_GO_CONWAY_NOPE :          2B31 C |
 MAS_GO_FREERUN :              2AE3 C |  MAS_GO_ID :                   2AC6 C |
 MAS_GO_SINGLE :               2AD3 C |  MAS_INIT :                    2744 C |
 MAS_INIT_RETURN :             208E C |  MAS_INTERRUPT_CMD :           284E C |
 MAS_INTERRUPT_CMD2 :          285B C |  MAS_INTERRUPT_CMD2L :         2862 C |
*MAS_INTRELTXT :               2E5C C |  MAS_INTTXT :                  2E51 C |
 MAS_INT_PORT :                  15 - |  MAS_LOADTXT :                 2E71 C |
 MAS_LOAD_PROGRAM_CMD :        287F C |  MAS_MENU :                    27A4 C |
 MAS_MENUTXT :                 2D26 C |  MAS_PGMTXT :                  2E84 C |
 MAS_PROMPT :                  27AB C | *MAS_PROMPT0 :                 27B2 C |
*MAS_PROMPT1 :                 27B5 C |  MAS_PROMPT2 :                 27BD C |
 MAS_PROMPTTXT :               2E3E C |  MAS_REQ_PORT :                  16 - |
 MAS_RESET :                   2842 C |  MAS_RESETTXT :                2E4A C |
 MAS_RESET_CMD :               2835 C |  MAS_RESET_INNER :             283C C |
 MAS_RST_PORT :                  17 - |  MAS_SETPGMTXT :               2E77 C |
 MAS_SET_CMD :                 2A8B C |  MAS_SET_CMD_LOOP :            2A97 C |
 MAS_SET_ID :                  2A6D C |  MAS_SET_ID_LOOP :             2A78 C |
 MAS_SET_PROGRAM_CMD :         288F C |  MAS_SET_PROGRAM_EXIT :        28A6 C |
 MAS_SET_PROGRAM_INNER :       2896 C |  MAS_STATUSTXT :               2E43 C |
 MAS_STATUS_CMD :              2824 C |  MAS_STAT_PORT :                  1 - |
 MAS_STUCKTXT :                2F24 C |  MAS_TAKE0 :                   28CD C |
 MAS_TAKE1 :                   28D5 C |  MAS_TAKEBANKTXT :             2EFD C |
 MAS_TAKETXT :                 2EE5 C | *MAS_TAKEWTXT :                2F10 C |
 MAS_TAKEW_CMD :               28DC C |  MAS_TAKEW_EXIT :              28F6 C |
 MAS_TAKE_CMD :                28AC C |  MAS_TAKE_EXIT :               28D6 C |
 MAS_TAKE_PORT :                 14 - |  MAS_UNTAKETXT :               2F1C C |
 MAS_UNTAKE_CMD :              28FC C |  MENU :                        208E C |
 MENUTXT :                     30AB C |  MMAP0 :                         0C - |
 MMAP1 :                         0D - |  MMAP2 :                         0E - |
 MMAP3 :                         0F - | *MM_IO0 :                        18 - |
*MM_IO1 :                        19 - | *MM_IO2 :                        1A - |
*MM_IO3 :                        1B - | *MM_IO4 :                        1C - |
*MM_IO5 :                        1D - | *MM_IO6 :                        1E - |
*MM_IO7 :                        1F - | *MOMCPU :                     8008E - |
*MOMCPUNAME :             "8008NEW" - | *NESTMAX :                      100 - |
 NEWVALUETXT :                 336C C | *NOCINP80 :                       1 - |
*NOIOMAP :                        1 - |  OUTPUT :                      240F C |
 OUTPUTTXT :                   3238 C |  PAGE0 :                          0 - |
 PAGE1 :                         10 - |  PAGE2 :                         20 - |
*PAGE3 :                         30 - |  POP :                         2136 C |
 POPTXT :                      346A C |  PORTTXT :                     3374 C |
 PRNDEC16 :                    252D C | *PRNDEC8 :                     2501 C |
 PRNDEC8A :                    2505 C |  PRNDEC8B :                    2507 C |
 PRNDEC8C :                    251A C |  PRNDEC8D :                    251F C |
 PRN_BIN :                     2D0A C |  PRN_BIN1 :                    2D1A C |
 PRN_BINL :                    2D0C C |  PRN_BIN_NEXT :                2D21 C |
*PROGTXT :                     3421 C |  PROMPT :                      2095 C |
 PROMPT0 :                     209C C |  PROMPT1 :                     20B8 C |
 PROMPT2 :                     20D3 C |  PROMPTTXT :                   31A7 C |
 PUSH :                        2144 C |  PUSHTXT :                     3475 C |
 PUTCH :                       2FDC C |  PUTS :                        26D6 C |
 RAM0 :                          0C - |  RAM1 :                          0D - |
*RAM2 :                          0E - | *RAM3 :                          0F - |
*RELAXED :                        0 - | *RESTORE_BC :                  249B C |
*RESTORE_DE :                  24AC C |  RESTORE_HL :                  2488 C |
 RETURN :                        0D - | *ROM0 :                           4 - |
*ROM1 :                           5 - |  ROMBASIC :                    2364 C |
 ROMBASTXT :                   33E2 C |  ROMOR :                          4 - |
 ROM_START :                   206C C |  RXWCONS :                     2718 C |
 RXWCONS1 :                    2734 C |  SAVE_B :                      1FF2 - |
*SAVE_BC :                     2493 C | *SAVE_C :                      1FF3 - |
 SAVE_D :                      1FF4 - | *SAVE_DE :                     24A4 C |
*SAVE_E :                      1FF5 - |  SAVE_H :                      1FF0 - |
 SAVE_HL :                     247E C | *SAVE_L :                      1FF1 - |
 SCOTTWASHERE :                2F62 C |  SCOTTWASHERE_END :            2FDC C |
*SER8251 :                        1 - |  SIDE :                        29C1 C |
 SINIT :                       26E5 - |  SINIT8251 :                   26E5 C |
 SINIT8251W :                  26F9 C |  SPACE :                       26D1 C |
 STACKINIT :                   2743 C |  STACK_POP :                      7 - |
 STACK_PUSH :                    17 - |  STAYALIVE :                   2C57 C |
 STAYDEAD :                    2C6A C |  SUBTR :                       2551 C |
 SUBTR1 :                      2553 C |  SUBTR2 :                      2570 C |
 SWITCH :                      2373 C |  SWITCHTXT :                   33E9 C |
 TIME :                    "8:32:6" - |  TITLETXT :                    2FFB C |
*TRUE :                           1 - |  TXWCONS :                     2701 C |
 TXWCONS0 :                    270A C |  TXWCONS2 :                    2726 C |
 UPDATE :                      2C6C C |  VALUETXT :                    32A0 C |
*VERSION :                     142F - |  WAITEND :                     231F C |
 WAITTXT :                     3314 C |  WRITE_HEX :                   2691 C |
*Z80SYNTAX :                      0 - |

    394 symbols
     79 unused symbols

 AS V1.42 Beta [Bld 273] - Source File monitor.asm - Page 3 - 8/16/2024 8:32:6


  Defined Macros:
  ---------------

COLDEC                                | COLINC                               
DO_FORCEUPPER                         | ROWDEC                               
ROWINC                                | RTS_OFF                              
RTS_ON                                |

      7 macros

 AS V1.42 Beta [Bld 273] - Source File monitor.asm - Page 4 - 8/16/2024 8:32:6


  Defined Functions:
  ------------------

LO                                    | HI                                   

 AS V1.42 Beta [Bld 273] - Source File monitor.asm - Page 5 - 8/16/2024 8:32:6


  Code Pages:
  ----------

STANDARD (0 changed characters)

1 code page

0.03 seconds assembly time

   3103 lines source file
   3236 lines incl. macro expansions
      2 passes
      0 errors
      0 warnings
